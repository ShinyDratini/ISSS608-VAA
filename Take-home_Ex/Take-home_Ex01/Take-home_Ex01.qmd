---
title: "Take-home Exercise 1: Ship Performance in the Gulf of Guinea"
author: "Justin"
date: "February 01, 2025"
date-modified: "last-modified" 
---

# Overview

## Setting the Scene

#### The Gulf of Guinea is a region rich in natural resources. It holds significant reserves of gas and oil as well as other valuable minerals. It is an important shipping zone transporting oil, gas and other commodities to and from central and southern Africa. It is also a hotspot for piracy. In 2020, there are 78 piracy incidents and 130 seafarers kidnapped for ransom.

## Task

### This study is conducted to find the corelation between the type of ships and and the revenue they bring in in the Gulf of Guinea. This will allow government officals to better strategize on how to improve security in the region.

# Getting Started

## Load the packages

### We load the following R packages using the pacman::p_load() function:

### tidyverse: (ggthemes, tidymodels, lubridate, knitr, dplyr) A collection of packages designed for data science in R.

### ggplot2: (Extensions such as ggHoriPlot, ggstatsplot, ggridges, ggdist)

### corrplot: Used for correlation matrix visualisation.

### car: Companion to Applied Regression, used for statistical analysis.

### plotly: Used to create interactive plots.

### colorspace: Used in colour manipulation for visualisations.

```{r}
#| echo: false
library(readr)
library(viridis)
pacman::p_load(SmartEDA, tidyverse, tidymodels, lubridate, 
               knitr, dplyr, ggplot2, ggHoriPlot, ggthemes, corrplot, ggstatsplot,
               ggdist, ggridges, car, plotly,
               colorspace, crosstalk)
```

## Data Source and Data Importing

#### Ship performance clustering dataset was used. The dataset is tailored for maritime data analytics. This dataset contains 2736 rows and 24 columns with feature categorized into numerical and categorical types.

#### First we read the CSV file with proper column type specification

### Numerical Features:

#### Speed_Over_Ground_Knots: Average speed of the ship over water (in knots).

#### Engine_Power_kW: Engine power output (in Kilowatts).

#### Distance_Traveled_nm: The total distance travelled by the ship (in nautical miles).

#### Operational_Cost_USD: Total operational cost per voyage (in USD).

#### Revenue_per_Voyagae_USD: Revenue generated per voyage (in USD).

#### Efficiency_nm_per_kWh: Energy efficiency calculated in nautical miles per kilowatt-hour.

### Categorical Features:

#### Ship_Type: Type of ship

#### Route_Type: Shipping route type

#### Engine_Type: Type of engine used

#### Maintenance_Status: Maintenance condition of the ship

#### Weather_Condition: Weather during voyages

```{r}
#|echo: FALSE
# Read CSV file with proper column type specification
df <- read_csv("data/Ship_Performance_Dataset.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))

# Check if Date conversion was successful
str(df)
```

## Data Pre-processing

#### First, from the summary statistics of the dataset, it is observed that there are missing values 'none' in the dataset.

```{r}
#|echo: FALSE 
# Summary statistics of the dataset
summary(df)

# Check dimensions (rows, columns)
dim(df)

# Count unique values in a single column
df %>% summarise_all(n_distinct)
```

#### Since the total missing values is \<5% of total rows, removing them will not significantly impact the dataset.

<details>

<summary>Click here to show the R code</summary>

```{r, echo=TRUE}
# Remove rows where any non-Date column contains "None"
df <- df[!apply(df[, !names(df) %in% "Date"], 1, function(row) any(row == "None")), ]
```

#### Next, binning and feature engineering will be done before analysis is done.

#### To improve trend analysis and facilitate meaningful comparisons, the dataset was binned into Month perios. This helps to identify seasonality and trends in voyages while reducing noise from daily fluctuations. A Profit column was introduced to measure voyage profitability, enabling insights into cost efficiency and revenue impact over time.

<details>

<summary>Click here to show the R code</summary>

```{r, echo=TRUE}
# Create a new column for Year-Month binning
df <- df %>%
  mutate(Month = floor_date(Date, "month")) %>%  # Truncate date to the first day of the month
  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)  # Calculate profit
```

```{r}
str(df)
```

# Visualization & Analysis

### Monthly Profit by Ship Type

```{r}
# Create the ggplot object
p <- ggplot(df, aes(x = Month, y = Profit, fill = Ship_Type, text = paste("Ship Type:", Ship_Type, "<br>Profit:", Profit))) +
  geom_bar(stat = "identity", position = "stack") +  
  labs(title = "Monthly Profit by Ship Type",
       x = "Month", y = "Profit (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(p, tooltip = "text")
```

### Monthly profit heatmap by Ship Type

#### The heatmap Viridis uses plasma which is colourblind friendly

```{r}
# Summarize total voyages per ship type per month 
df_summary <- df %>%
  group_by(Month, Ship_Type) %>%
  summarise(Profit = sum(Profit, na.rm = TRUE), 
            Total_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE),
            .groups = "drop")  # Suppress grouped output warning

# Create the heatmap with tooltip details
p <- ggplot(df_summary, aes(x = Month, y = Ship_Type, fill = Profit, 
                    text = paste("Ship Type:", Ship_Type, 
                                 "<br>Month:", Month, 
                                 "<br>Profit (USD):", round(Profit, 2), 
                                 "<br>Total Voyages:", Total_Voyages))) +  
  geom_tile() +
  scale_fill_viridis_c(option = "plasma") +  
  labs(title = "Monthly Profit Heatmap by Ship Type",
       x = "Month", y = "Ship Type", fill = "Profit (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(p, tooltip = "text")
```

```{r}
# Scatter plot with regression line
ggplot(df, aes(x = Cargo_Weight_tons, y = Profit, color = Ship_Type)) +
  geom_point(alpha = 0.6, size = 3) +  # Scatter points
  geom_smooth(method = "lm", se = FALSE) +  # Linear trend line
  facet_wrap(~Route_Type) +  # Facet by Route Type
  labs(title = "Effect of Cargo Weight on Profitability",
       x = "Cargo Weight (tons)", y = "Profit (USD)", color = "Ship Type") +
  theme_minimal()
```

```{r}
# Select only numerical columns for correlation
num_data <- df[, sapply(df, is.numeric)]

# Compute correlation matrix
cor_matrix <- cor(num_data, use = "complete.obs")

# Display correlation with Revenue_per_Voyage_USD
cor_with_revenue <- cor_matrix[, "Revenue_per_Voyage_USD"]

# Sort by highest correlation
sorted_cor <- sort(cor_with_revenue, decreasing = TRUE)
print(sorted_cor)
```

### From the Correlation Matrix, we can observe that none of the numerical variables have strong linear relationships with revenue.

## Profitability Analysis

```{r}
df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type
profit_by_ship_type <- df_new %>%
  group_by(Ship_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Engine_Type
profit_by_engine_type <- df_new %>%
  group_by(Engine_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Route_Type
profit_by_route_type <- df_new %>%
  group_by(Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Display results
print(profit_by_ship_type)
print(profit_by_engine_type)
print(profit_by_route_type)
```

### Plotting the Profitability Analysis

```{r}
df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type, Engine_Type, and Route_Type
profit_analysis <- df_new %>%
  group_by(Ship_Type, Engine_Type, Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n(), .groups = 'drop')

# Create ggplot with interactive tooltips
p <- ggplot(profit_analysis, aes(x = Ship_Type, y = Average_Profit, fill = Engine_Type,
                                 text = paste("Ship Type:", Ship_Type,
                                              "<br>Engine Type:", Engine_Type,
                                              "<br>Route Type:", Route_Type,
                                              "<br>Avg Profit (USD):", round(Average_Profit, 2)))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(~ Route_Type) +
  theme_minimal() +
  labs(title = "Average Profit by Ship Type, Engine Type, and Route Type",
       y = "Average Profit (USD)",
       x = "Ship Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot to an interactive plot
ggplotly(p, tooltip = "text")
```

### Ridgeline Plot

```{r}
ggplot(df_new, aes(x = Profit_per_Voyage_USD, y = Ship_Type, fill = Route_Type)) +
  geom_density_ridges(alpha = 0.7) +
  labs(title = "Ridgeline Plot: Profit Distribution by Ship Type and Route",
       x = "Profit per Voyage (USD)", 
       y = "Ship Type",
       fill = "Route Type") +
  theme_minimal()
```

## Turnaround Analysis

```{r}
turnaround_analysis <- df %>%
  group_by(Weather_Condition, Route_Type) %>%
  summarise(Average_Turnaround_Time = mean(Turnaround_Time_hours),
            Count = n(), .groups = 'drop')

# Display results
print(turnaround_analysis)
```

```{r}
# Visualize Turnaround Time
# Bar plot to show Average Turnaround Time by Weather_Condition and Route_Type
ggplot(turnaround_analysis, aes(x = Weather_Condition, y = Average_Turnaround_Time, fill = Route_Type)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  theme_minimal() +
  labs(title = "Average Turnaround Time by Weather Condition and Route Type",
       y = "Average Turnaround Time (hours)",
       x = "Weather Condition") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# Analyze Turnaround Time by Route_Type, Cargo_Weight_tons, and Distance_Traveled_nm
ggplot(df, aes(x = Distance_Traveled_nm, y = Turnaround_Time_hours, color = Cargo_Weight_tons)) +
  geom_point(alpha = 0.7) +
  facet_wrap(~ Route_Type) +
  theme_minimal() +
  labs(title = "Turnaround Time by Route Type, Cargo Weight, and Distance Traveled",
       x = "Distance Traveled (nm)",
       y = "Turnaround Time (hours)",
       color = "Cargo Weight (tons)")
```

```{r}
df %>%
  group_by(Ship_Type, Route_Type) %>%
  summarise(Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = Ship_Type, y = Route_Type, fill = Avg_Efficiency)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma") +  # Enhances color visibility
  theme_minimal() +
  labs(title = "Heatmap of Average Efficiency by Ship Type and Route Type",
       x = "Ship Type",
       y = "Route Type",
       fill = "Avg Efficiency (nm/kWh)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Advanced Data Visualisation

### Interactive Plots

```{r}
# Convert the 'Date' column to Date type if not already
df$Date <- as.Date(df$Date)

# Summarize the data by unique combinations of Ship_Type, Route_Type, Engine_Type, and Maintenance_Status
summary_data <- df %>%
  group_by(Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Date) %>%
  summarise(
    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Profit = sum(Revenue_per_Voyage_USD, na.rm = TRUE) - sum(Operational_Cost_USD, na.rm = TRUE),
    .groups = "drop"  # ✅ Removes unnecessary grouping
  ) 

# Convert Date to character to avoid animation errors
summary_data$Date <- as.character(summary_data$Date)

# Fix size scaling
size_range <- range(summary_data$Total_Operational_Cost, na.rm = TRUE)
size_scaled <- scales::rescale(summary_data$Total_Operational_Cost, to = c(5, 50)) # Ensure reasonable size scaling

# Create an interactive plot with plotly and add a slider for the date range
bp <- plot_ly(
  data = summary_data,
  x = ~Total_Operational_Cost, 
  y = ~Total_Revenue, 
  size = ~size_scaled,  # ✅ Use scaled size to prevent extreme bubbles
  color = ~Maintenance_Status,  # ✅ Keep categorical color mapping
  frame = ~Date,  # ✅ Ensure Date is character type
  text = ~paste("Ship Type:", Ship_Type,
                "<br>Route Type:", Route_Type,
                "<br>Engine Type:", Engine_Type,
                "<br>Maintenance Status:", Maintenance_Status,
                "<br>Date:", Date,
                "<br>Profit (USD):", Profit),
  hoverinfo = "text",  # ✅ Display text when hovering over points
  type = 'scatter', 
  mode = 'markers'  # ✅ Ensure no unintended line elements
) %>%
  layout(
    title = "Operational Cost vs Revenue per Voyage",
    xaxis = list(title = "Total Operational Cost (USD)"),
    yaxis = list(title = "Total Revenue per Voyage (USD)"),
    showlegend = TRUE
  ) %>%
  animation_opts(
    frame = 100, 
    redraw = TRUE
  ) %>%
  animation_slider(
    currentvalue = list(prefix = "Date: ")
  )

# Display the plot
bp
```

```{r}

# Summarize the data by unique combinations of Ship_Type, Route_Type, Engine_Type, and Maintenance_Status
summary_data <- df %>%
  group_by(Ship_Type, Route_Type, Engine_Type, Maintenance_Status) %>%
  summarise(
    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)
  )

# Check if the summarization gives you 144 rows (should be the case)
nrow(summary_data)

# Create an interactive scatter plot with plotly
interactive_plot <- plot_ly(summary_data, 
                            x = ~Total_Operational_Cost, 
                            y = ~Total_Revenue, 
                            color = ~Ship_Type, 
                            size = ~Total_Operational_Cost, 
                            type = 'scatter', 
                            mode = 'markers', 
                            text = ~paste("Ship Type:", Ship_Type,
                                          "<br>Route Type:", Route_Type,
                                          "<br>Engine Type:", Engine_Type,
                                          "<br>Maintenance Status:", Maintenance_Status)) %>%
  layout(
    title = "Operational Cost vs Revenue per Voyage",
    xaxis = list(title = "Total Operational Cost (USD)"),
    yaxis = list(title = "Total Revenue per Voyage (USD)"),
    showlegend = TRUE
  )

# Display the plot
interactive_plot
```

## Time-Series Analysis

### Profit Trends by Ship Type

```{r}
df %>%
  filter(Date >= "2018-01-01") %>%
  ggplot() +
  geom_horizon(aes(x = Date, y = Profit), 
               origin = "midpoint", 
               horizonscale = 6) +
  facet_grid(Ship_Type~.) +
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  labs(title = "Profit Trends by Ship Type (Jan 2018 to Present)",
       x = "Date", y = "Profit (USD)") +
  theme(
    panel.spacing.y = unit(0, "lines"), 
    strip.text.y = element_text(size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
  ) +
  scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y")
```

## Statistical Testing (ANOVA)

```{r}
# Run ANOVA for each Ship Type & Engine Type
anova_results <- list()

for (ship in unique(df$Ship_Type)) {
  for (engine in unique(df$Engine_Type)) {
    
    # Subset the data
    subset_data <- df %>%
      filter(Ship_Type == ship, Engine_Type == engine)
    
    # Ensure there are at least 2 unique Maintenance Status levels
    if (length(unique(subset_data$Maintenance_Status)) > 1) {
      
      # Run ANOVA
      anova_model <- aov(Operational_Cost_USD ~ Maintenance_Status, data = subset_data)
      
      # Store results
      anova_results[[paste(ship, engine, sep = " - ")]] <- summary(anova_model)
    }
  }
}

# Print results
anova_results
```

### Container Ship - Steam Turbine

#### p-value: 0.00146 (Significant at 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p \< 0.05). You can explore which maintenance levels contribute to the difference using post-hoc tests (e.g., Tukey HSD).

### Bulk Carrier - Heavy Fuel Oil (HFO)

#### p-value: 0.00383 (Significant at 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p \< 0.05). Again, post-hoc tests like Tukey HSD can be run to identify which maintenance statuses differ.

<details>

<summary>▶ Show the code</summary>

```{r}
# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
container_ship_steamturbine_data <- subset(df, Ship_Type == "Container Ship" & Engine_Type == "Steam Turbine")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

<details>

::: callout-tip
#### Tukey HSD test results for the Container Ship (Steam Turbine) above:

✅ Fair vs. Critical: ✅ The difference in operational costs between "Fair" and "Critical" maintenance status is 45,571.73 USD. The confidence interval for this difference ranges from -13,059.80 USD to 104,203.30 USD. The p-value is 0.1605, which is not statistically significant (p \> 0.05). This suggests that the operational cost is not significantly different between the "Fair" and "Critical" maintenance statuses.

✅ Good vs. Critical: ✅The difference in operational costs between "Good" and "Critical" maintenance status is 95,727.44 USD. The confidence interval for this difference ranges from 34,271.37 USD to 157,183.50 USD. The p-value is 0.0009, which is statistically significant (p \< 0.05). This indicates that the operational cost is significantly different between the "Good" and "Critical" maintenance statuses.

✅ Good vs. Fair: ✅ The difference in operational costs between "Good" and "Fair" maintenance status is 50,155.71 USD. The confidence interval for this difference ranges from -9,909.12 USD to 110,220.50 USD. The p-value is 0.1217, which is not statistically significant (p \> 0.05). This indicates that the operational cost is not significantly different between the "Good" and "Fair" maintenance statuses.

✅ Summary: ✅ The Good vs. Critical comparison is statistically significant, indicating that the maintenance status between "Good" and "Critical" has a significant effect on operational costs. The Fair vs. Critical and Good vs. Fair comparisons are not statistically significant, suggesting that there is no significant difference in operational costs between these groups for Container Ship - Steam Turbine.
:::

<details>

<summary>▶ Show the code</summary>

```{r}
# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
bulk_carrier_hfo_data <- subset(df, Ship_Type == "Bulk Carrier" & Engine_Type == "Heavy Fuel Oil (HFO)")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

<details>

::: callout-tip
#### Tukey HSD test results for the Bulk Carrier (HFO) above:

✅ Fair vs. Critical: ✅ The difference in operational costs between "Fair" and "Critical" maintenance status is -70,404.32 USD. The confidence interval for this difference ranges from -126,508.99 USD to -14,299.64 USD. The p-value is 0.0096, which is statistically significant (p \< 0.05). This indicates that the operational cost is significantly different between the "Fair" and "Critical" maintenance statuses.

✅ Good vs. Critical: ✅ The difference in operational costs between "Good" and "Critical" maintenance status is 2,772.82 USD. The confidence interval for this difference ranges from -57,093.13 USD to 62,638.76 USD. The p-value is 0.9934, which is not statistically significant (p \> 0.05). This indicates that the operational \## cost is not significantly different between the "Good" and "Critical" maintenance statuses.

✅ Good vs. Fair: ✅ The difference in operational costs between "Good" and "Fair" maintenance status is 73,177.13 USD. The confidence interval for this difference ranges from 12,542.89 USD to 133,811.38 USD. The p-value is 0.0134, which is statistically significant (p \< 0.05). This suggests that the operational cost \## is significantly different between the "Good" and "Fair" maintenance statuses.

✅ Summary: ✅ The Fair vs. Critical comparison and the Good vs. Fair comparison are statistically significant, indicating that maintenance status does have an effect on operational costs. The Good vs. Critical comparison is not statistically significant, suggesting that maintenance status between "Good" and "Critical" may not have a significant impact on operational cost for Bulk Carrier - Heavy Fuel Oil (HFO).
:::

# Summary and Conclusion

# References

Edited By: Daniel Fiott, & By: Alice Vervaeke. (2025, January 21). *Deep waters: The Maritime Security Landscape in the Gulf of Guinea. European Union Institute for Security Studies.* <https://www.iss.europa.eu/publications/briefs/deep-waters-maritime-security-landscape-gulf-guinea>

By: Kam, Tin Seong. (2023). *Visualising Distribution. R for Visual Analytics.* <https://r4va.netlify.app/chap09>
