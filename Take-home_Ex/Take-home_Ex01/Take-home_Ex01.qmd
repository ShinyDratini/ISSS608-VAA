---
title: "Take-home Exercise 1: Ship Performance in the Gulf of Guinea"
author: "Justin"
date: "February 01, 2025"
date-modified: "last-modified" 
---

# Overview

## Setting the Scene

The Gulf of Guinea is a region abundant in natural resources, including oil, gas, and valuable minerals. It serves as a crucial shipping corridor, facilitating the transportation of commodities to and from Central and Southern Africa. However, it is also one of the world’s most dangerous maritime regions, plagued by piracy and security threats. In 2020, there were 78 piracy incidents, with 130 seafarers kidnapped for ransom, making it a key concern for global trade and maritime security.

## Task

This study aims to analyze the correlation between various factors affecting ship performance and revenue generation in the Gulf of Guinea. By identifying key influences on operational efficiency and profitability, the findings will help government officials and maritime stakeholders develop strategies to enhance ship performance, mitigate risks, and optimize trade efficiency in the region.

# Getting Started

## Load the packages

We load the following R packages using the pacman::p_load() function:

| Library | Description |
|-----------------------------------|-------------------------------------|
| [tidyverse](https://www.tidyverse.org/) | A collection of packages designed for data science in R. (ggthemes, tidymodels, lubridate, knitr, dplyr) |
| [ggplot2](https://ggplot2.tidyverse.org/) | Extensions such as ggHoriPlot, ggstatsplot, ggridges, ggdist |
| [corrplot](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) | Used for correlation matrix visualisation. |
| [car](https://www.geeksforgeeks.org/car-package-in-r/) | Companion to Applied Regression, used for statistical analysis. |
| [plotly](https://plotly.com/) | Used to create interactive plots. |
| [colorspace](https://cran.r-project.org/web/packages/colorspace/vignettes/colorspace.html)  | Used in colour manipulation for visualisations. |

```{r}
#| echo: false
pacman::p_load(readr, viridis, SmartEDA, tidyverse, tidymodels, lubridate, 
               knitr, dplyr, ggplot2, ggHoriPlot, ggthemes, corrplot, ggstatsplot,
               ggdist, ggridges, car, plotly,
               colorspace, crosstalk, scales)
```

## Data Source and Data Importing

Ship performance clustering dataset from [Kaggle](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset) was used. The dataset is tailored for maritime data analytics. This dataset contains 2736 rows and 24 columns with feature categorized into numerical and categorical types.

First we read the CSV file with proper column type specification

| Numerical Features | Description |
|-------------------------------------------|-----------------------------|
| Speed_Over_Ground_Knots | Average speed of the ship over water (in knots). |
| Engine_Power_kW | Engine power output (in Kilowatts). |
| Distance_Traveled_nm | The total distance travelled by the ship (in nautical miles). |
| Operational_Cost_USD | Total operational cost per voyage (in USD). |
| Revenue_per_Voyage_USD | Revenue generated per voyage (in USD). |
| Efficiency_nm_per_kWh | Energy efficiency calculated in nautical miles per kilowatt-hour. |

| Categorical Features | Description |
|---------------------------------------------|---------------------------|
| Ship_Type | Type of ship used for transport. |
| Route_Type | Type of shipping route (e.g., Coastal, Long-haul, etc.). |
| Engine_Type | Type of engine used in the ship. |
| Maintenance_Status | Maintenance condition of the ship. |
| Weather_Condition | Weather conditions during voyages. |

```{r}
#| echo: false
# Read CSV file with proper column type specification
df <- read_csv("data/Ship_Performance_Dataset.csv", col_types = cols(Date = col_date(format = "%Y-%m-%d")))

# Check if Date conversion was successful
str(df)
```

## Data Pre-processing

First, from the summary statistics of the dataset, it is observed that there are missing values 'none' in the dataset.

```{r}
#| echo: false
# Summary statistics of the dataset
summary(df)
```

Since the total missing values is \<5% of total rows, removing them will not significantly impact the dataset.

```{r}
#| echo: false
# Remove rows where any non-Date column contains "None"
df <- df[!apply(df[, !names(df) %in% "Date"], 1, function(row) any(row == "None")), ]
```

Next, binning and feature engineering will be done before analysis is done.

To improve trend analysis and facilitate meaningful comparisons, the dataset was binned into Month perios. This helps to identify seasonality and trends in voyages while reducing noise from daily fluctuations. A Profit column was introduced to measure voyage profitability, enabling insights into cost efficiency and revenue impact over time.

```{r}
# Create a new column for Year-Month binning
df <- df %>%
  mutate(Month = floor_date(Date, "month")) %>%  # Truncate date to the first day of the month
  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)  # Calculate profit
```

```{r}
#| echo: false
str(df)
```

# Visualization & Analysis

### Monthly Profit by Ship Type

```{r}
#| echo: false
# Create the ggplot object
p <- ggplot(df, aes(x = Month, y = Profit, fill = Ship_Type, text = paste("Ship Type:", Ship_Type, "<br>Profit:", Profit))) +
  geom_bar(stat = "identity", position = "stack") +  
  labs(title = "Monthly Profit by Ship Type",
       x = "Month", y = "Profit (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(p, tooltip = "text")
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false
# Create the ggplot object
p <- ggplot(df, aes(x = Month, y = Profit, fill = Ship_Type, text = paste("Ship Type:", Ship_Type, "<br>Profit:", Profit))) +
  geom_bar(stat = "identity", position = "stack") +  
  labs(title = "Monthly Profit by Ship Type",
       x = "Month", y = "Profit (USD)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert to interactive plot
ggplotly(p, tooltip = "text")
```

### Monthly profit heatmap by Ship Type

```{r}
#| echo: false
# Scatter plot with regression line
ggplot(df, aes(x = Cargo_Weight_tons, y = Profit, color = Ship_Type)) +
  geom_point(alpha = 0.6, size = 3) +  # Scatter points
  geom_smooth(method = "lm", se = FALSE) +  # Linear trend line
  facet_wrap(~Route_Type) +  # Facet by Route Type
  labs(title = "Effect of Cargo Weight on Profitability",
       x = "Cargo Weight (tons)", y = "Profit (USD)", color = "Ship Type") +
  theme_minimal()
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false
# Scatter plot with regression line
ggplot(df, aes(x = Cargo_Weight_tons, y = Profit, color = Ship_Type)) +
  geom_point(alpha = 0.6, size = 3) +  # Scatter points
  geom_smooth(method = "lm", se = FALSE) +  # Linear trend line
  facet_wrap(~Route_Type) +  # Facet by Route Type
  labs(title = "Effect of Cargo Weight on Profitability",
       x = "Cargo Weight (tons)", y = "Profit (USD)", color = "Ship Type") +
  theme_minimal()
```

```{r}
#| echo: false
# Select only numerical columns for correlation
num_data <- df[, sapply(df, is.numeric)]

# Compute correlation matrix
cor_matrix <- cor(num_data, use = "complete.obs")

# Display correlation with Revenue_per_Voyage_USD
cor_with_revenue <- cor_matrix[, "Revenue_per_Voyage_USD"]

# Sort by highest correlation
sorted_cor <- sort(cor_with_revenue, decreasing = TRUE)
print(sorted_cor)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false
# Select only numerical columns for correlation
num_data <- df[, sapply(df, is.numeric)]

# Compute correlation matrix
cor_matrix <- cor(num_data, use = "complete.obs")

# Display correlation with Revenue_per_Voyage_USD
cor_with_revenue <- cor_matrix[, "Revenue_per_Voyage_USD"]

# Sort by highest correlation
sorted_cor <- sort(cor_with_revenue, decreasing = TRUE)
print(sorted_cor)
```

### From the Correlation Matrix, we can observe that none of the numerical variables have strong linear relationships with revenue.

## Profitability Analysis

```{r}
#| echo: false
df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type
profit_by_ship_type <- df_new %>%
  group_by(Ship_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Engine_Type
profit_by_engine_type <- df_new %>%
  group_by(Engine_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Route_Type
profit_by_route_type <- df_new %>%
  group_by(Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Display results
print(profit_by_ship_type)
print(profit_by_engine_type)
print(profit_by_route_type)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false
df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type
profit_by_ship_type <- df_new %>%
  group_by(Ship_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Engine_Type
profit_by_engine_type <- df_new %>%
  group_by(Engine_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Analyze Profit by Route_Type
profit_by_route_type <- df_new %>%
  group_by(Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n())

# Display results
print(profit_by_ship_type)
print(profit_by_engine_type)
print(profit_by_route_type)
```

### Plotting the Profitability Analysis

```{r}
#| echo: false

df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type, Engine_Type, and Route_Type
profit_analysis <- df_new %>%
  group_by(Ship_Type, Engine_Type, Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n(), .groups = 'drop')

# Create ggplot with interactive tooltips
p <- ggplot(profit_analysis, aes(x = Ship_Type, y = Average_Profit, fill = Engine_Type,
                                 text = paste("Ship Type:", Ship_Type,
                                              "<br>Engine Type:", Engine_Type,
                                              "<br>Route Type:", Route_Type,
                                              "<br>Avg Profit (USD):", round(Average_Profit, 2)))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(~ Route_Type) +
  theme_minimal() +
  labs(title = "Average Profit by Ship Type, Engine Type, and Route Type",
       y = "Average Profit (USD)",
       x = "Ship Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot to an interactive plot
ggplotly(p, tooltip = "text")
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

df_new <- df %>%
  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)

# Analyze Profit by Ship_Type, Engine_Type, and Route_Type
profit_analysis <- df_new %>%
  group_by(Ship_Type, Engine_Type, Route_Type) %>%
  summarise(Average_Profit = mean(Profit_per_Voyage_USD),
            Total_Profit = sum(Profit_per_Voyage_USD),
            Count = n(), .groups = 'drop')

# Create ggplot with interactive tooltips
p <- ggplot(profit_analysis, aes(x = Ship_Type, y = Average_Profit, fill = Engine_Type,
                                 text = paste("Ship Type:", Ship_Type,
                                              "<br>Engine Type:", Engine_Type,
                                              "<br>Route Type:", Route_Type,
                                              "<br>Avg Profit (USD):", round(Average_Profit, 2)))) +
  geom_bar(stat = "identity", position = position_dodge()) +
  facet_wrap(~ Route_Type) +
  theme_minimal() +
  labs(title = "Average Profit by Ship Type, Engine Type, and Route Type",
       y = "Average Profit (USD)",
       x = "Ship Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Convert ggplot to an interactive plot
ggplotly(p, tooltip = "text")
```

### Ridgeline Plot

```{r}
#| echo: false
ggplot(df_new, aes(x = Profit_per_Voyage_USD, y = Ship_Type, fill = Route_Type)) +
  geom_density_ridges(alpha = 0.7) +
  labs(title = "Ridgeline Plot: Profit Distribution by Ship Type and Route",
       x = "Profit per Voyage (USD)", 
       y = "Ship Type",
       fill = "Route Type") +
  theme_minimal()
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

ggplot(df_new, aes(x = Profit_per_Voyage_USD, y = Ship_Type, fill = Route_Type)) +
  geom_density_ridges(alpha = 0.7) +
  labs(title = "Ridgeline Plot: Profit Distribution by Ship Type and Route",
       x = "Profit per Voyage (USD)", 
       y = "Ship Type",
       fill = "Route Type") +
  theme_minimal()
```

## Turnaround Analysis

```{r}
#| echo: false
turnaround_analysis <- df %>%
  group_by(Weather_Condition, Route_Type) %>%
  summarise(Average_Turnaround_Time = mean(Turnaround_Time_hours),
            Count = n(), .groups = 'drop')

# Display results
print(turnaround_analysis)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

turnaround_analysis <- df %>%
  group_by(Weather_Condition, Route_Type) %>%
  summarise(Average_Turnaround_Time = mean(Turnaround_Time_hours),
            Count = n(), .groups = 'drop')

# Display results
print(turnaround_analysis)
```

```{r}
#| echo: false
# Visualize Turnaround Time
# Bar plot to show Average Turnaround Time by Weather_Condition and Route_Type
ggplot(turnaround_analysis, aes(x = Weather_Condition, y = Average_Turnaround_Time, fill = Route_Type)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  theme_minimal() +
  labs(title = "Average Turnaround Time by Weather Condition and Route Type",
       y = "Average Turnaround Time (hours)",
       x = "Weather Condition") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
Effect of Weather Conditions on Turnaround Time:

Turnaround time appears to increase slightly from calm to rough weather, especially for Long-haul and Coastal routes.
The impact of weather is relatively minor, suggesting that ships may have efficient contingency plans.
Comparison Between Route Types:

Short-haul and Transoceanic routes have consistently higher turnaround times compared to Coastal and Long-haul routes, regardless of weather conditions.
Long-haul routes experience the highest turnaround time in rough weather, possibly due to longer distances and greater exposure to adverse conditions.
Operational Considerations:

If rough weather significantly increases turnaround time, shipping companies may need better port efficiency strategies or adjustments in scheduling.
Coastal routes may be less affected, indicating shorter processing times at ports.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Visualize Turnaround Time
# Bar plot to show Average Turnaround Time by Weather_Condition and Route_Type
ggplot(turnaround_analysis, aes(x = Weather_Condition, y = Average_Turnaround_Time, fill = Route_Type)) +
  geom_bar(stat = "identity", position = position_dodge()) +
  theme_minimal() +
  labs(title = "Average Turnaround Time by Weather Condition and Route Type",
       y = "Average Turnaround Time (hours)",
       x = "Weather Condition") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
#| echo: false
df %>%
  group_by(Ship_Type, Route_Type) %>%
  summarise(Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = Ship_Type, y = Route_Type, fill = Avg_Efficiency)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma") +  # Enhances color visibility
  theme_minimal() +
  labs(title = "Heatmap of Average Efficiency by Ship Type and Route Type",
       x = "Ship Type",
       y = "Route Type",
       fill = "Avg Efficiency (nm/kWh)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
Profitability Variation Across Ship Types:

Bulk Carrier appears to have more high-profit months (yellow patches), indicating higher and more stable profitability.
Fish Carrier & Container Ship show frequent low-profit months (blue/purple patches), implying higher volatility in earnings.
Tankers show a mix of high and low profit months, suggesting inconsistent profitability trends.
Profit Fluctuations Over Time:

October 2023 & January 2024 have notable low-profit months for Fish Carrier & Container Ship.
Bulk Carriers & Tankers exhibit strong profitability in mid-2024, potentially indicating increased demand.
Possible Business & Operational Considerations:

The seasonal impact on profitability should be investigated—whether market demand, maintenance schedules, or seasonal regulations affect certain ship types.
The Bulk Carrier's strong performance suggests potential investment opportunities in this category.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

df %>%
  group_by(Ship_Type, Route_Type) %>%
  summarise(Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = "drop") %>%
  ggplot(aes(x = Ship_Type, y = Route_Type, fill = Avg_Efficiency)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma") +  # Enhances color visibility
  theme_minimal() +
  labs(title = "Heatmap of Average Efficiency by Ship Type and Route Type",
       x = "Ship Type",
       y = "Route Type",
       fill = "Avg Efficiency (nm/kWh)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Advanced Data Visualisation

### Interactive Plots

```{r}
#| echo: false
# Get unique Route Types
route_types <- unique(df$Route_Type)

# Create a scatter plot for each Route Type but set them hidden by default
plot_list <- list()
visibility_list <- list()

# ✅ Create the traces for each Route Type
for (i in seq_along(route_types)) {
  route_data <- df %>% filter(Route_Type == route_types[i])
  
  plot_list[[i]] <- list(
    x = jitter(route_data$Operational_Cost_USD, amount = 10000),  # ✅ Reduce overlap
    y = jitter(route_data$Revenue_per_Voyage_USD, amount = 10000),
    mode = "markers",
    type = "scatter",  # ✅ Explicitly specify scatter type
    marker = list(size = route_data$Cargo_Weight_tons / 100,  # ✅ Reduce bubble size
                  opacity = 0.6),  # ✅ Make bubbles slightly transparent
    name = route_types[i],  # Legend name
    text = paste(
      "Ship Type:", route_data$Ship_Type,
      "<br>Engine Type:", route_data$Engine_Type,
      "<br>Maintenance Status:", route_data$Maintenance_Status,
      "<br>Cargo Weight (tons):", route_data$Cargo_Weight_tons,
      "<br>Profit (USD):", route_data$Profit
    ),
    hoverinfo = "text",
    visible = ifelse(i == 1, TRUE, "legendonly")  # ✅ Show only first Route Type initially
  )
}

# ✅ Create "All" Option to show all Route Types
all_visibility <- rep(TRUE, length(plot_list))  # ✅ Ensures all traces are visible when "All" is selected

# ✅ Add "All" Button for Dropdown
all_button <- list(
  method = "update",
  args = list(list(visible = all_visibility)),
  label = "All"
)

# ✅ Add Individual Route Type Buttons
for (i in seq_along(route_types)) {
  visibility_list[[i]] <- list(
    method = "update",
    args = list(list(visible = rep(FALSE, length(route_types)))),
    label = route_types[i]
  )
  visibility_list[[i]]$args[[1]]$visible[i] <- TRUE
}

# ✅ Add "All" option at the start of the dropdown
visibility_list <- append(list(all_button), visibility_list)

# ✅ Create Plotly Figure
p <- plot_ly()

for (plot in plot_list) {
  p <- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, 
                 type = "scatter",  # ✅ Explicitly specify scatter type
                 marker = plot$marker, name = plot$name, 
                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)
}

# ✅ Add dropdown filter with "All" option
p <- layout(p,
            title = "Operational Cost vs Revenue (Filtered by Route Type)",
            xaxis = list(title = "Operational Cost (USD)"),
            yaxis = list(title = "Revenue per Voyage (USD)"),
            showlegend = TRUE,
            updatemenus = list(
              list(
                buttons = visibility_list,
                direction = "down",
                showactive = TRUE,
                x = 0.15,  # Position of dropdown
                y = 1.15
              )
            ))

# ✅ Display the plot
p
```

Revenue Increases with Operational Cost but with High Variability

While there is some correlation between operational cost and revenue, the scatter pattern suggests high variability, meaning that higher operational cost does not always lead to higher revenue.
Overlap Among Route Types

The four route types overlap significantly, meaning that no single route type has a clear advantage in terms of cost vs. revenue.
This suggests that other factors, such as cargo type, fuel efficiency, and weather conditions, might play a bigger role in determining revenue.
Clusters of High-Cost, High-Revenue Voyages

Some bubbles are concentrated in the top-right quadrant, representing voyages with both high operational costs and high revenue.
These voyages could correspond to high-value cargo or long-distance shipments.
Presence of Low Revenue, High Operational Cost Voyages

There are some voyages with high operational costs but relatively low revenue.
These may represent inefficient voyages, poor cargo utilization, or increased fuel consumption due to weather or maintenance issues.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Get unique Route Types
route_types <- unique(df$Route_Type)

# Create a scatter plot for each Route Type but set them hidden by default
plot_list <- list()
visibility_list <- list()

# ✅ Create the traces for each Route Type
for (i in seq_along(route_types)) {
  route_data <- df %>% filter(Route_Type == route_types[i])
  
  plot_list[[i]] <- list(
    x = jitter(route_data$Operational_Cost_USD, amount = 10000),  # ✅ Reduce overlap
    y = jitter(route_data$Revenue_per_Voyage_USD, amount = 10000),
    mode = "markers",
    type = "scatter",  # ✅ Explicitly specify scatter type
    marker = list(size = route_data$Cargo_Weight_tons / 100,  # ✅ Reduce bubble size
                  opacity = 0.6),  # ✅ Make bubbles slightly transparent
    name = route_types[i],  # Legend name
    text = paste(
      "Ship Type:", route_data$Ship_Type,
      "<br>Engine Type:", route_data$Engine_Type,
      "<br>Maintenance Status:", route_data$Maintenance_Status,
      "<br>Cargo Weight (tons):", route_data$Cargo_Weight_tons,
      "<br>Profit (USD):", route_data$Profit
    ),
    hoverinfo = "text",
    visible = ifelse(i == 1, TRUE, "legendonly")  # ✅ Show only first Route Type initially
  )
}

# ✅ Create "All" Option to show all Route Types
all_visibility <- rep(TRUE, length(plot_list))  # ✅ Ensures all traces are visible when "All" is selected

# ✅ Add "All" Button for Dropdown
all_button <- list(
  method = "update",
  args = list(list(visible = all_visibility)),
  label = "All"
)

# ✅ Add Individual Route Type Buttons
for (i in seq_along(route_types)) {
  visibility_list[[i]] <- list(
    method = "update",
    args = list(list(visible = rep(FALSE, length(route_types)))),
    label = route_types[i]
  )
  visibility_list[[i]]$args[[1]]$visible[i] <- TRUE
}

# ✅ Add "All" option at the start of the dropdown
visibility_list <- append(list(all_button), visibility_list)

# ✅ Create Plotly Figure
p <- plot_ly()

for (plot in plot_list) {
  p <- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, 
                 type = "scatter",  # ✅ Explicitly specify scatter type
                 marker = plot$marker, name = plot$name, 
                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)
}

# ✅ Add dropdown filter with "All" option
p <- layout(p,
            title = "Operational Cost vs Revenue (Filtered by Route Type)",
            xaxis = list(title = "Operational Cost (USD)"),
            yaxis = list(title = "Revenue per Voyage (USD)"),
            showlegend = TRUE,
            updatemenus = list(
              list(
                buttons = visibility_list,
                direction = "down",
                showactive = TRUE,
                x = 0.15,  # Position of dropdown
                y = 1.15
              )
            ))

# ✅ Display the plot
p
```

## Time-Series Analysis

```{r}
#| echo: false
# Compute Monthly Aggregation (Sum) by Route Type
df_monthly <- df %>%
  mutate(Month = floor_date(Date, "month")) %>%  # ✅ Extract month
  group_by(Route_Type, Month) %>%
  summarise(
    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Profit = sum(Revenue_per_Voyage_USD, na.rm = TRUE) - sum(Operational_Cost_USD, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(Month)  # ✅ Ensure months are sorted correctly

# Get unique Route Types & Months
route_types <- unique(df_monthly$Route_Type)
month_list <- unique(df_monthly$Month)

# Initialize storage for traces
plot_list <- list()

# ✅ Create a scatter plot for each Route Type & Month (All visible)
for (i in seq_along(route_types)) {
  for (j in seq_along(month_list)) {
    
    route_month_data <- df_monthly %>% 
      filter(Route_Type == route_types[i], Month == month_list[j])
    
    if (nrow(route_month_data) > 0) {
      trace <- list(
        x = jitter(route_month_data$Total_Operational_Cost, amount = 50000),  # ✅ Reduce clustering
        y = jitter(route_month_data$Total_Revenue, amount = 50000),
        mode = "markers",
        type = "scatter",  # ✅ Explicitly specify scatter type
        marker = list(size = route_month_data$Total_Profit / 1000000, opacity = 0.7),  # ✅ Scaled size & transparency
        name = paste(route_types[i], format(month_list[j], "%B %Y")),  # ✅ Improve legend readability
        text = paste(
          "Route Type:", route_types[i],
          "<br>Month:", format(route_month_data$Month, "%B %Y"),
          "<br>Total Operational Cost: $", formatC(route_month_data$Total_Operational_Cost, big.mark = ","),
          "<br>Total Revenue: $", formatC(route_month_data$Total_Revenue, big.mark = ","),
          "<br>Total Profit: $", formatC(route_month_data$Total_Profit, big.mark = ",")
        ),
        hoverinfo = "text",
        visible = TRUE  # ✅ Show all by default
      )
      
      plot_list[[length(plot_list) + 1]] <- trace
    }
  }
}

# ✅ Create Plotly figure (No dropdowns, uses legend instead)
p <- plot_ly()

for (plot in plot_list) {
  p <- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, 
                 type = "scatter",
                 marker = plot$marker, name = plot$name, 
                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)
}

# ✅ Improved Layout
p <- layout(p,
            title = "Total Monthly Operational Cost vs Revenue",
            xaxis = list(title = "Total Operational Cost (USD)"),
            yaxis = list(title = "Total Revenue (USD)"),
            showlegend = TRUE  # ✅ Users can toggle visibility via the legend
)

# ✅ Display the plot
p
```
This chart provides valuable insights into how operational costs impact revenue across different shipping routes and months.
It highlights potential profitable routes, seasonal trends, and areas for operational improvement.
Government officials and shipping companies can use this data to make better strategic decisions to improve efficiency and profitability. 🚢📊
```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Compute Monthly Aggregation (Sum) by Route Type
df_monthly <- df %>%
  mutate(Month = floor_date(Date, "month")) %>%  # ✅ Extract month
  group_by(Route_Type, Month) %>%
  summarise(
    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Profit = sum(Revenue_per_Voyage_USD, na.rm = TRUE) - sum(Operational_Cost_USD, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(Month)  # ✅ Ensure months are sorted correctly

# Get unique Route Types & Months
route_types <- unique(df_monthly$Route_Type)
month_list <- unique(df_monthly$Month)

# Initialize storage for traces
plot_list <- list()

# ✅ Create a scatter plot for each Route Type & Month (All visible)
for (i in seq_along(route_types)) {
  for (j in seq_along(month_list)) {
    
    route_month_data <- df_monthly %>% 
      filter(Route_Type == route_types[i], Month == month_list[j])
    
    if (nrow(route_month_data) > 0) {
      trace <- list(
        x = jitter(route_month_data$Total_Operational_Cost, amount = 50000),  # ✅ Reduce clustering
        y = jitter(route_month_data$Total_Revenue, amount = 50000),
        mode = "markers",
        type = "scatter",  # ✅ Explicitly specify scatter type
        marker = list(size = route_month_data$Total_Profit / 1000000, opacity = 0.7),  # ✅ Scaled size & transparency
        name = paste(route_types[i], format(month_list[j], "%B %Y")),  # ✅ Improve legend readability
        text = paste(
          "Route Type:", route_types[i],
          "<br>Month:", format(route_month_data$Month, "%B %Y"),
          "<br>Total Operational Cost: $", formatC(route_month_data$Total_Operational_Cost, big.mark = ","),
          "<br>Total Revenue: $", formatC(route_month_data$Total_Revenue, big.mark = ","),
          "<br>Total Profit: $", formatC(route_month_data$Total_Profit, big.mark = ",")
        ),
        hoverinfo = "text",
        visible = TRUE  # ✅ Show all by default
      )
      
      plot_list[[length(plot_list) + 1]] <- trace
    }
  }
}

# ✅ Create Plotly figure (No dropdowns, uses legend instead)
p <- plot_ly()

for (plot in plot_list) {
  p <- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, 
                 type = "scatter",
                 marker = plot$marker, name = plot$name, 
                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)
}

# ✅ Improved Layout
p <- layout(p,
            title = "Total Monthly Operational Cost vs Revenue",
            xaxis = list(title = "Total Operational Cost (USD)"),
            yaxis = list(title = "Total Revenue (USD)"),
            showlegend = TRUE  # ✅ Users can toggle visibility via the legend
)

# ✅ Display the plot
p
```

```{r}
#| echo: false
# Summarize the data with averages
summary_data <- df %>%
  group_by(Date, Maintenance_Status) %>%
  summarise(
    Avg_Operational_Cost = mean(Operational_Cost_USD, na.rm = TRUE),
    Avg_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),
    Avg_Profit = mean(Profit, na.rm = TRUE),
    .groups = "drop"
  ) 

# Convert Date to character for animation
summary_data$Date <- as.character(summary_data$Date)

# Scale sizes
size_scaled <- scales::rescale(summary_data$Avg_Operational_Cost, to = c(5, 50))

# **Fix: Ensure Maintenance_Status is not required in breakeven_data**
breakeven_data <- data.frame(
  x = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE)),
  y = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE))
)

# Create animated scatter plot
bp <- plot_ly(
  data = summary_data,
  x = ~Avg_Operational_Cost, 
  y = ~Avg_Revenue, 
  size = ~size_scaled,  
  color = ~Maintenance_Status,  # ✅ Keep this only in animated points
  frame = ~Date,  
  text = ~paste("Date:", Date,
                "<br>Maintenance Status:", Maintenance_Status,
                "<br>Avg Profit (USD):", Avg_Profit),
  hoverinfo = "text",
  type = 'scatter', 
  mode = 'markers'
) %>%

  # **Fix: Add breakeven line separately (no Maintenance_Status)**
  add_trace(
    data = breakeven_data,
    x = ~x, 
    y = ~y, 
    type = 'scatter',
    mode = 'lines',
    line = list(color = 'black', dash = 'dot'),
    name = 'Breakeven Line',
    inherit = FALSE  # ✅ Ensure no missing column issues
  ) %>%

  # Layout settings
  layout(
    title = "Average Operational Cost vs Revenue per Voyage (with Breakeven Line)",
    xaxis = list(title = "Average Operational Cost (USD)"),
    yaxis = list(title = "Average Revenue per Voyage (USD)"),
    showlegend = TRUE
  ) %>%

  # Slow down animation
  animation_opts(
    frame = 300,  # Slower animation
    easing = "linear",
    redraw = TRUE
  ) %>%

  # Animation slider settings
  animation_slider(
    currentvalue = list(prefix = "Date: ")
  )

# Display the plot
bp
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Summarize the data with averages
summary_data <- df %>%
  group_by(Date, Maintenance_Status) %>%
  summarise(
    Avg_Operational_Cost = mean(Operational_Cost_USD, na.rm = TRUE),
    Avg_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),
    Avg_Profit = mean(Profit, na.rm = TRUE),
    .groups = "drop"
  ) 

# Convert Date to character for animation
summary_data$Date <- as.character(summary_data$Date)

# Scale sizes
size_scaled <- scales::rescale(summary_data$Avg_Operational_Cost, to = c(5, 50))

# **Fix: Ensure Maintenance_Status is not required in breakeven_data**
breakeven_data <- data.frame(
  x = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE)),
  y = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE))
)

# Create animated scatter plot
bp <- plot_ly(
  data = summary_data,
  x = ~Avg_Operational_Cost, 
  y = ~Avg_Revenue, 
  size = ~size_scaled,  
  color = ~Maintenance_Status,  # ✅ Keep this only in animated points
  frame = ~Date,  
  text = ~paste("Date:", Date,
                "<br>Maintenance Status:", Maintenance_Status,
                "<br>Avg Profit (USD):", Avg_Profit),
  hoverinfo = "text",
  type = 'scatter', 
  mode = 'markers'
) %>%

  # **Fix: Add breakeven line separately (no Maintenance_Status)**
  add_trace(
    data = breakeven_data,
    x = ~x, 
    y = ~y, 
    type = 'scatter',
    mode = 'lines',
    line = list(color = 'black', dash = 'dot'),
    name = 'Breakeven Line',
    inherit = FALSE  # ✅ Ensure no missing column issues
  ) %>%

  # Layout settings
  layout(
    title = "Average Operational Cost vs Revenue per Voyage (with Breakeven Line)",
    xaxis = list(title = "Average Operational Cost (USD)"),
    yaxis = list(title = "Average Revenue per Voyage (USD)"),
    showlegend = TRUE
  ) %>%

  # Slow down animation
  animation_opts(
    frame = 300,  # Slower animation
    easing = "linear",
    redraw = TRUE
  ) %>%

  # Animation slider settings
  animation_slider(
    currentvalue = list(prefix = "Date: ")
  )

# Display the plot
bp
```

## Profitability Distribution Across Ship Types

```{r}
#| echo: false
# Flip the axes
ggplot(df, 
       aes(x = Ship_Type, 
           y = Profit, 
           fill = Maintenance_Status)) +
  
  # Half-eye density plot (horizontal)
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               alpha = 0.6) +
  
  # Boxplot (horizontal)
  geom_boxplot(width = 0.2, 
               outlier.shape = NA,
               alpha = 0.8) +
  
  # Dot plot (horizontal)
  stat_dots(side = "left",
            justification = 1.2,
            binwidth = NA,  
            overflow = "compress",
            dotsize = 0.6) +  
  
  # Flip coordinates to make it horizontal
  coord_flip() +
  
  # Titles and theme
  labs(title = "Profitability Distribution Across Ship Types",
       x = "Ship Type", 
       y = "Profit per Voyage (USD)",
       fill = "Maintenance Status") +
  
  theme_minimal()  # Clean visualization
```
🔹 Ships in Good Maintenance (Blue) Tend to Be More Profitable:

Across all ship types, the blue violin plots are more skewed towards higher profits.
This suggests that well-maintained ships generate higher and more stable profits.
🔹 Tanker and Bulk Carrier Ships Have Higher Profit Variability:

Tankers and Bulk Carriers have wider violin plots, indicating a large spread of profits.
These ships have potential for high profits but also more variability.
🔹 Fish Carriers Have More Loss-Making Voyages:

The Fish Carrier category has several voyages with very low profits.
Maintenance status doesn’t seem to significantly improve profitability for these ships.
🔹 Critical Maintenance Status (Red) Results in More Loss-Making Voyages:

Ships in Critical condition (Red) have a larger spread towards low profits.
Poor maintenance is associated with lower revenue and higher operational costs.
🔹 Container Ships Show More Consistent Profitability:

The boxplots for Container Ships are relatively tighter, meaning their profits are more stable compared to other ship types.

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Flip the axes
ggplot(df, 
       aes(x = Ship_Type, 
           y = Profit, 
           fill = Maintenance_Status)) +
  
  # Half-eye density plot (horizontal)
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA,
               alpha = 0.6) +
  
  # Boxplot (horizontal)
  geom_boxplot(width = 0.2, 
               outlier.shape = NA,
               alpha = 0.8) +
  
  # Dot plot (horizontal)
  stat_dots(side = "left",
            justification = 1.2,
            binwidth = NA,  
            overflow = "compress",
            dotsize = 0.6) +  
  
  # Flip coordinates to make it horizontal
  coord_flip() +
  
  # Titles and theme
  labs(title = "Profitability Distribution Across Ship Types",
       x = "Ship Type", 
       y = "Profit per Voyage (USD)",
       fill = "Maintenance Status") +
  
  theme_minimal()  # Clean visualization
```

## Statistical Testing (ANOVA)

```{r}
#| echo: false

# Run ANOVA for each Ship Type & Engine Type
anova_results <- list()

for (ship in unique(df$Ship_Type)) {
  for (engine in unique(df$Engine_Type)) {
    
    # Subset the data
    subset_data <- df %>%
      filter(Ship_Type == ship, Engine_Type == engine)
    
    # Ensure there are at least 2 unique Maintenance Status levels
    if (length(unique(subset_data$Maintenance_Status)) > 1) {
      
      # Run ANOVA
      anova_model <- aov(Operational_Cost_USD ~ Maintenance_Status, data = subset_data)
      
      # Store results
      anova_results[[paste(ship, engine, sep = " - ")]] <- summary(anova_model)
    }
  }
}

# Print results
anova_results
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Run ANOVA for each Ship Type & Engine Type
anova_results <- list()

for (ship in unique(df$Ship_Type)) {
  for (engine in unique(df$Engine_Type)) {
    
    # Subset the data
    subset_data <- df %>%
      filter(Ship_Type == ship, Engine_Type == engine)
    
    # Ensure there are at least 2 unique Maintenance Status levels
    if (length(unique(subset_data$Maintenance_Status)) > 1) {
      
      # Run ANOVA
      anova_model <- aov(Operational_Cost_USD ~ Maintenance_Status, data = subset_data)
      
      # Store results
      anova_results[[paste(ship, engine, sep = " - ")]] <- summary(anova_model)
    }
  }
}

# Print results
anova_results
```

### Container Ship - Steam Turbine

p-value: 0.00146 (Significant at 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p \< 0.05). You can explore which maintenance levels contribute to the difference using post-hoc tests (e.g., Tukey HSD).

### Bulk Carrier - Heavy Fuel Oil (HFO)

p-value: 0.00383 (Significant at 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p \< 0.05). Again, post-hoc tests like Tukey HSD can be run to identify which maintenance statuses differ.

```{r}
#| echo: false

# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
container_ship_steamturbine_data <- subset(df, Ship_Type == "Container Ship" & Engine_Type == "Steam Turbine")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
container_ship_steamturbine_data <- subset(df, Ship_Type == "Container Ship" & Engine_Type == "Steam Turbine")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

::: callout-tip
#### Tukey HSD test results for the Container Ship (Steam Turbine) above:

✅ Fair vs. Critical: ✅ The difference in operational costs between "Fair" and "Critical" maintenance status is 45,571.73 USD. The confidence interval for this difference ranges from -13,059.80 USD to 104,203.30 USD. The p-value is 0.1605, which is not statistically significant (p \> 0.05). This suggests that the operational cost is not significantly different between the "Fair" and "Critical" maintenance statuses.

✅ Good vs. Critical: ✅The difference in operational costs between "Good" and "Critical" maintenance status is 95,727.44 USD. The confidence interval for this difference ranges from 34,271.37 USD to 157,183.50 USD. The p-value is 0.0009, which is statistically significant (p \< 0.05). This indicates that the operational cost is significantly different between the "Good" and "Critical" maintenance statuses.

✅ Good vs. Fair: ✅ The difference in operational costs between "Good" and "Fair" maintenance status is 50,155.71 USD. The confidence interval for this difference ranges from -9,909.12 USD to 110,220.50 USD. The p-value is 0.1217, which is not statistically significant (p \> 0.05). This indicates that the operational cost is not significantly different between the "Good" and "Fair" maintenance statuses.

✅ Summary: ✅ The Good vs. Critical comparison is statistically significant, indicating that the maintenance status between "Good" and "Critical" has a significant effect on operational costs. The Fair vs. Critical and Good vs. Fair comparisons are not statistically significant, suggesting that there is no significant difference in operational costs between these groups for Container Ship - Steam Turbine.
:::

```{r}
#| echo: false

# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
bulk_carrier_hfo_data <- subset(df, Ship_Type == "Bulk Carrier" & Engine_Type == "Heavy Fuel Oil (HFO)")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

```{r}
#| code-fold: true
#| code-summary: "Click here to show the R code"
#| eval: false

# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)
bulk_carrier_hfo_data <- subset(df, Ship_Type == "Bulk Carrier" & Engine_Type == "Heavy Fuel Oil (HFO)")

# Run ANOVA for Operational Cost by Maintenance Status
anova_model_hfo <- aov(Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)

# Run the Tukey HSD test
tukey_test <- TukeyHSD(anova_model_hfo)

# Print the results of the Tukey test
print(tukey_test)
```

::: callout-tip
#### Tukey HSD test results for the Bulk Carrier (HFO) above:

✅ Fair vs. Critical: ✅ The difference in operational costs between "Fair" and "Critical" maintenance status is -70,404.32 USD. The confidence interval for this difference ranges from -126,508.99 USD to -14,299.64 USD. The p-value is 0.0096, which is statistically significant (p \< 0.05). This indicates that the operational cost is significantly different between the "Fair" and "Critical" maintenance statuses.

✅ Good vs. Critical: ✅ The difference in operational costs between "Good" and "Critical" maintenance status is 2,772.82 USD. The confidence interval for this difference ranges from -57,093.13 USD to 62,638.76 USD. The p-value is 0.9934, which is not statistically significant (p \> 0.05). This indicates that the operational \## cost is not significantly different between the "Good" and "Critical" maintenance statuses.

✅ Good vs. Fair: ✅ The difference in operational costs between "Good" and "Fair" maintenance status is 73,177.13 USD. The confidence interval for this difference ranges from 12,542.89 USD to 133,811.38 USD. The p-value is 0.0134, which is statistically significant (p \< 0.05). This suggests that the operational cost \## is significantly different between the "Good" and "Fair" maintenance statuses.

✅ Summary: ✅ The Fair vs. Critical comparison and the Good vs. Fair comparison are statistically significant, indicating that maintenance status does have an effect on operational costs. The Good vs. Critical comparison is not statistically significant, suggesting that maintenance status between "Good" and "Critical" may not have a significant impact on operational cost for Bulk Carrier - Heavy Fuel Oil (HFO).
:::

# Summary and Conclusion

## Profitability Analysis Across Different Variables

### 1. Weather Condition and Route Type

Turnaround time increases with worsening weather conditions (Calm → Moderate → Rough). Long-haul routes experience the longest delays in rough weather, which may impact profitability. Coastal and Transoceanic routes have similar turnaround times across all weather conditions. Conclusion: Weather conditions impact efficiency, and rough conditions can reduce profitability due to increased delays. 
### 2. Distance Traveled, Cargo Weight, and Route Type 

No clear trend showing a direct relationship between distance traveled and turnaround time. Larger cargo weight does not necessarily lead to longer turnaround times. Conclusion: Efficient scheduling and loading processes likely help mitigate the impact of travel distance and cargo weight on turnaround time. 

### 3. Ship Type and Efficiency Efficiency (nm/kWh) varies significantly across ship types and route types.

Transoceanic routes show the greatest variation in efficiency, with some ship types performing much better than others. Conclusion: The choice of ship type plays a crucial role in energy efficiency and, consequently, profitability. 

### 4. Profitability Distribution Across Ship Types Different ship types show varying profitability distributions, with some ship types being more profitable on average. 

Maintenance status plays a role in profitability, with "Good" maintenance status correlating with higher profit levels. Conclusion: Preventive maintenance and proper upkeep can significantly enhance profitability across different ship types.

Route Type & Weather: Routes affected by rough weather have longer turnaround times, impacting operational costs. Distance & Cargo Weight: Distance traveled and cargo weight do not significantly impact turnaround time, indicating efficient operations. Ship Type & Efficiency: Certain ship types are significantly more efficient, and using the most efficient ships on specific routes can increase profitability. Maintenance & Profitability: Well-maintained ships consistently yield higher profitability, emphasizing the importance of scheduled maintenance. Overall, optimizing ship maintenance, selecting the right ship type for each route, and managing turnaround times in challenging weather conditions can improve profitability.

# References

Edited By: Daniel Fiott, & By: Alice Vervaeke. (2025, January 21). *Deep waters: The Maritime Security Landscape in the Gulf of Guinea. European Union Institute for Security Studies.* <https://www.iss.europa.eu/publications/briefs/deep-waters-maritime-security-landscape-gulf-guinea>

By: Kam, Tin Seong. (2023). *Visualising Distribution. R for Visual Analytics.* <https://r4va.netlify.app/chap09>
