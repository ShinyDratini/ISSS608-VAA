[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course.\n\nknitr::include_graphics(\"image_with_text.png\")\n\n\n\n\n\n\n\n\n\n\nThis section provides an overview of the coursework.\n\n\nDetails about the hands-on exercises can go here.\n\n\n\nDetails about the In-Class exercises can go here.\n\n\n\nDetails about the Take-Home exercises can go here.\n\n\n\n\nLinks or references to resources used for the course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html#coursework-overview",
    "href": "index.html#coursework-overview",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "This section provides an overview of the coursework.\n\n\nDetails about the hands-on exercises can go here.\n\n\n\nDetails about the In-Class exercises can go here.\n\n\n\nDetails about the Take-Home exercises can go here."
  },
  {
    "objectID": "index.html#additional-resources",
    "href": "index.html#additional-resources",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Links or references to resources used for the course."
  },
  {
    "objectID": "index.html#take-home-exercises",
    "href": "index.html#take-home-exercises",
    "title": "ISSS608-VAA",
    "section": "Take-Home Exercises",
    "text": "Take-Home Exercises\nDetails about the hands-on exercises can go here."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on_Ex03",
    "section": "",
    "text": "pacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on_Ex03",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") + \n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n#Displaying multiple information on tooltip (Tooltip is black and font colour is white)\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name =\", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS\n))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) + \n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltop-style-background-white-font-colour-black",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltop-style-background-white-font-colour-black",
    "title": "Hands-on_Ex03",
    "section": "Customising Tooltop style (Background = White, Font colour = Black)",
    "text": "Customising Tooltop style (Background = White, Font colour = Black)\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; colour:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) + \n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(   #&lt;&lt;\n    opts_tooltip(   #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on_Ex03",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip\n\ntooltip &lt;- function(y, ymax, accuracy = 0.1) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\ngg_point &lt;- ggplot(data=exam_data,\n                   aes(x = RACE),\n                   ) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(\n                     tooltip(y, ymax\n                   ))),\n    fun.data = \"mean_se\",\n    geom = GeomInteractiveCol,\n    fill = \"light blue\"\n  ) + \n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic-class-will-be-highlighted-upon-mouse-over",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic-class-will-be-highlighted-upon-mouse-over",
    "title": "Hands-on_Ex03",
    "section": "Hover effect with data_id aesthetic (CLASS will be highlighted upon mouse over)",
    "text": "Hover effect with data_id aesthetic (CLASS will be highlighted upon mouse over)\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) + \n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") + \n  scale_y_continuous(NULL,\n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "title": "Hands-on_Ex03",
    "section": "Styling hover effect",
    "text": "Styling hover effect\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) + \n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-with-hover-effect-class-will-be-highlighted-and-shown",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-with-hover-effect-class-will-be-highlighted-and-shown",
    "title": "Hands-on_Ex03",
    "section": "Combining tooltip with hover effect (CLASS will be highlighted and shown)",
    "text": "Combining tooltip with hover effect (CLASS will be highlighted and shown)\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS,\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on_Ex03",
    "section": "Click effect with onclick",
    "text": "Click effect with onclick\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on_Ex03",
    "section": "Coordinated Multiple Views with ggiraph",
    "text": "Coordinated Multiple Views with ggiraph\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) + \n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                      breaks = NULL)\n  \n  p2 &lt;- ggplot(data=exam_data,\n               aes(x = ENGLISH)) + \n    geom_dotplot_interactive(\n      aes(data_id = ID),\n      stackgroups = TRUE,\n      binwidth = 1,\n      method = \"histodot\") + \n    coord_cartesian(xlim=c(0,100)) + \n    scale_y_continuous(NULL,\n                       breaks = NULL)\n  girafe(code = print(p1 + p2),\n         width_svg = 6,\n         height_svg = 3,\n         options = list(\n           opts_hover(css = \"fill: #202020;\"),\n           opts_hover_inv(css = \"opacity:0.2;\")\n    )\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on_Ex03",
    "section": "Creating an interactive scatter plot: plot_ly() method",
    "text": "Creating an interactive scatter plot: plot_ly() method\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on_Ex03",
    "section": "Working with visual variable: plot_ly() method",
    "text": "Working with visual variable: plot_ly() method\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -&gt; https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on_Ex03",
    "section": "Creating an interactive scatter plot: ggplotly() method",
    "text": "Creating an interactive scatter plot: ggplotly() method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on_Ex03",
    "section": "Coordinated Multiple Views with plotly",
    "text": "Coordinated Multiple Views with plotly\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on_Ex03",
    "section": "Interactive Data Table: DT package",
    "text": "Interactive Data Table: DT package\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on_Ex03",
    "section": "Linked brushing: Crosstalk method",
    "text": "Linked brushing: Crosstalk method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)\n\nSetting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-population-bubble-plot",
    "title": "Hands-on_Ex03",
    "section": "Building a static population bubble plot",
    "text": "Building a static population bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-the-animated-bubble-plot",
    "title": "Hands-on_Ex03",
    "section": "Building the animated bubble plot",
    "text": "Building the animated bubble plot\n\nggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Ex03",
    "section": "Animated Data Visualisation: plotly",
    "text": "Animated Data Visualisation: plotly\n\ngg &lt;- ggplot(globalPop,\n             aes(x = Old,\n                 y = Young,\n                 size = Population,\n                 colour = Country)) + \n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) + \n  scale_size(range = c(2,12)) +\n  labs(x = '% Aged',\n       y = '% Young')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7, :\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nWarning in geom_point(aes(size = Population, frame = Year), alpha = 0.7):\nIgnoring unknown aesthetics: frame\n\nggplotly(gg)\n\nWarning in p$x$data[firstFrame] &lt;- p$x$frames[[1]]$data: number of items to\nreplace is not a multiple of replacement length"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on_Ex03",
    "section": "Building an animated bubble plot: plot_ly() method",
    "text": "Building an animated bubble plot: plot_ly() method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers',\n          marker = list(sizemode = 'area')\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values.\n\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on_Ex03",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data-1",
    "title": "Hands-on_Ex03",
    "section": "Importing the data",
    "text": "Importing the data\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(col)\n\n  # Now:\n  data %&gt;% select(all_of(col))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04.html",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex04.html#getting-started",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Ex04",
    "section": "",
    "text": "pacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nVisualising Distribution with Ridgeline Plot\n\n\nPlotting ridgeline graph: ggridges method\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\nWarning: `stat(x)` was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(x)` instead.\n\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\nMapping the probabilities directly onto colour\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\nRidgeline plots with quantile lines\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 5,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\nPicking joint bandwidth of 3.18\n\n\n\n\n\n\n\n\n\n\n\nVisualising Distribution with Raincloud Plot\n\n\nPlotting a Half Eye graph\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the boxplot with geom_boxplot()\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\n\n\n\n\nAdding the Dot Plots with stat_dots()\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\n\n\n\n\nFinishing touch\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\nWarning: The provided binwidth will cause dots to overflow the boundaries of the\ngeometry.\n→ Set `binwidth = NA` to automatically determine a binwidth that ensures dots\n  fit within the bounds,\n→ OR set `overflow = \"compress\"` to automatically reduce the spacing between\n  dots to ensure the dots fit within the bounds,\n→ OR set `overflow = \"keep\"` to allow dots to overflow the bounds of the\n  geometry without producing a warning.\nℹ For more information, see the documentation of the `binwidth` and `overflow`\n  arguments of `?ggdist::geom_dots()` or the section on constraining dot sizes\n  in vignette(\"dotsinterval\") (`vignette(ggdist::dotsinterval)`).\n\n\n\n\n\n\n\n\n\n\n\nVisual Statistical Analysis\n\n\nVisual Statistical Analysis with ggstatsplot\n\n\nInstalling and launching R packages\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nOne-sample test: gghistostats() method\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nUnpacking the Bayes Factor\n\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\n\n\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\n\n\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\nTwo-sample mean test: ggbetweenstats()\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nOneway ANOVA Test: ggbetweenstats() method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Correlation: ggscatterstats()\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nSignificant Test of Association (Depedence) : ggbarstats() methods\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)\n\n\n\n\n\n\n\n\n\n\nVisualising Models\n\n\nInstalling and loading the required libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImporting Excel file: readxl methods\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\n\nMultiple Regression Model using lm()\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nModel Diagnostic: checking for multicolinearity\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: checking normality assumption\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\nFor confidence bands, please install `qqplotr`.\n\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Check model for homogeneity of variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\nModel Diagnostic: Complete check\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: see methods\n\nplot(parameters(model1))\n\n\n\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty\n\n\nInstalling and loading the packages\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)\n\n\n\nData import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nVisualizing the uncertainty of point estimates: ggplot2 methods\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nPlotting confidence interval of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n#Visualizing the uncertainty of point estimates with interactive error bars\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"red\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"\nN:\", `n`,\n                                  \"\nAvg. Scores:\", round(mean, digits = 2),\n                                  \"\n95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /\nmaths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting standard error bars of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\nPlotting confidence interval of point estimates\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates with interactive error bars\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"\nN:\", `n`,\n                                  \"\nAvg. Scores:\", round(mean, digits = 2),\n                                  \"\n95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /\nmaths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))\n\nWarning in geom_point(aes(x = RACE, y = mean, text = paste(\"Race:\", RACE, :\nIgnoring unknown aesthetics: text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`\n\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nVisualizing the uncertainty of point estimates: ggdist methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\nWarning in draw_slabs(self, ...): `fill_type = \"gradient\"` is not supported by the current graphics device.\nℹ Falling back to `fill_type = \"segments\"`.\n→ If you believe your current graphics device does support `fill_type =\n  \"gradient\"` but auto-detection failed, try setting `fill_type = \"gradient\"`\n  explicitly. If this causes the gradient to display correctly, then this\n  warning is likely a false positive caused by the graphics device failing to\n  properly report its support for the `\"LinearGradient\"` pattern via\n  `grDevices::dev.capabilities()`. Consider reporting a bug to the author of\n  the graphics device.\nℹ For more information, see the documentation for `fill_type` in\n  `ggdist::geom_slabinterval()` or the documentation for\n  `ggplot2::check_device()`.\nCaused by warning in `draw_slabs()`:\n! Unable to check the capabilities of the png device.\n\n\n\n\n\n\n\n\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n\nInstalling ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\nUsing GitHub PAT from the git credential store.\n\n\nDownloading GitHub repo wilkelab/ungeviz@HEAD\n\n\nstrapgod (NA -&gt; ea2b1ecfc...) [GitHub]\n\n\nDownloading GitHub repo DavisVaughan/strapgod@HEAD\n\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\justi\\AppData\\Local\\Temp\\Rtmp27sXBy\\remotes593021d410cb\\DavisVaughan-strapgod-ea2b1ec/DESCRIPTION' ... OK\n* preparing 'strapgod':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\nOmitted 'LazyData' from DESCRIPTION\n* building 'strapgod_0.0.4.9000.tar.gz'\n\n\n\nInstalling package into 'C:/Users/justi/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\nSkipping install of 'strapgod' from a github remote, the SHA1 (ea2b1ecf) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n── R CMD build ─────────────────────────────────────────────────────────────────\n* checking for file 'C:\\Users\\justi\\AppData\\Local\\Temp\\Rtmp27sXBy\\remotes593048934fc4\\wilkelab-ungeviz-d43afb6/DESCRIPTION' ... OK\n* preparing 'ungeviz':\n* checking DESCRIPTION meta-information ... OK\n* checking for LF line-endings in source and make files and shell scripts\n* checking for empty or unneeded directories\n* building 'ungeviz_0.1.0.tar.gz'\n\n\n\nInstalling package into 'C:/Users/justi/AppData/Local/R/win-library/4.4'\n(as 'lib' is unspecified)\n\n\n\n\nLaunch the application in R\n\nlibrary(ungeviz)\n\n\n\nVisualising Uncertainty with Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)\n\nWarning in geom_hpline(data = sampler(25, group = RACE), height = 0.6, color =\n\"#D55E00\"): Ignoring unknown parameters: `height`\n\n\nWarning: No renderer available. Please install the gifski, av, or magick package to\ncreate animated output\n\n\nNULL\n\n\n\n\nFunnel Plots for Fair Comparisons\n\n\nInstalling and Launching R Packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\nImporting Data\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\nRows: 267 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): City, District, Sub-district\ndbl (4): Sub-district ID, Positive, Recovered, Death\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nFunnelPlotR methods\n\n\nFunnelPlotR methods: The basic plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnelPlotR methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnelPlotR methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nFunnel Plot for Fair Visual Comparison: ggplot2 methods\n\n\nComputing the basic derived fields\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\nCalculate lower and upper limits for 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nPlotting a static funnel plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            linewidth = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            linewidth = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            linewidth = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            linewidth = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             linewidth = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\np\n\n\n\n\n\n\n\n\n\n\nInteractive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#load-the-packages",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Load the packages",
    "text": "Load the packages\nWe load the following R packages using the pacman::p_load() function:\n\n\n\nLibrary\nDescription\n\n\n\n\ntidyverse\nA collection of packages designed for data science in R. (ggthemes, tidymodels, lubridate, knitr, dplyr)\n\n\nggplot2\nExtensions such as ggHoriPlot, ggstatsplot, ggridges, ggdist\n\n\ncorrplot\nUsed for correlation matrix visualisation.\n\n\ncar\nCompanion to Applied Regression, used for statistical analysis.\n\n\nplotly\nUsed to create interactive plots.\n\n\ncolorspace \nUsed in colour manipulation for visualisations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source-and-data-importing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-source-and-data-importing",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Data Source and Data Importing",
    "text": "Data Source and Data Importing\nShip performance clustering dataset from Kaggle was used. The dataset is tailored for maritime data analytics. This dataset contains 2736 rows and 24 columns with feature categorized into numerical and categorical types.\nFirst we read the CSV file with proper column type specification\n\n\n\n\n\n\n\nNumerical Features\nDescription\n\n\n\n\nSpeed_Over_Ground_Knots\nAverage speed of the ship over water (in knots).\n\n\nEngine_Power_kW\nEngine power output (in Kilowatts).\n\n\nDistance_Traveled_nm\nThe total distance travelled by the ship (in nautical miles).\n\n\nOperational_Cost_USD\nTotal operational cost per voyage (in USD).\n\n\nRevenue_per_Voyage_USD\nRevenue generated per voyage (in USD).\n\n\nEfficiency_nm_per_kWh\nEnergy efficiency calculated in nautical miles per kilowatt-hour.\n\n\n\n\n\n\n\n\n\n\nCategorical Features\nDescription\n\n\n\n\nShip_Type\nType of ship used for transport.\n\n\nRoute_Type\nType of shipping route (e.g., Coastal, Long-haul, etc.).\n\n\nEngine_Type\nType of engine used in the ship.\n\n\nMaintenance_Status\nMaintenance condition of the ship.\n\n\nWeather_Condition\nWeather conditions during voyages.\n\n\n\n\n\nspc_tbl_ [2,736 × 18] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Date                   : Date[1:2736], format: \"2023-06-04\" \"2023-06-11\" ...\n $ Ship_Type              : chr [1:2736] \"Container Ship\" \"Fish Carrier\" \"Container Ship\" \"Bulk Carrier\" ...\n $ Route_Type             : chr [1:2736] \"None\" \"Short-haul\" \"Long-haul\" \"Transoceanic\" ...\n $ Engine_Type            : chr [1:2736] \"Heavy Fuel Oil (HFO)\" \"Steam Turbine\" \"Diesel\" \"Steam Turbine\" ...\n $ Maintenance_Status     : chr [1:2736] \"Critical\" \"Good\" \"Fair\" \"Fair\" ...\n $ Speed_Over_Ground_knots: num [1:2736] 12.6 10.4 20.7 21.1 13.7 ...\n $ Engine_Power_kW        : num [1:2736] 2063 1796 1649 915 1090 ...\n $ Distance_Traveled_nm   : num [1:2736] 1031 1060 659 1127 1445 ...\n $ Draft_meters           : num [1:2736] 14.13 14.65 7.2 11.79 9.73 ...\n $ Weather_Condition      : chr [1:2736] \"Moderate\" \"Rough\" \"Moderate\" \"Moderate\" ...\n $ Cargo_Weight_tons      : num [1:2736] 1959 162 178 1737 261 ...\n $ Operational_Cost_USD   : num [1:2736] 483832 483388 448543 261350 287718 ...\n $ Revenue_per_Voyage_USD : num [1:2736] 292183 883766 394019 87551 676121 ...\n $ Turnaround_Time_hours  : num [1:2736] 25.9 63.2 49.4 22.4 64.2 ...\n $ Efficiency_nm_per_kWh  : num [1:2736] 1.455 0.29 0.5 0.703 1.331 ...\n $ Seasonal_Impact_Score  : num [1:2736] 1.416 0.886 1.406 1.371 0.583 ...\n $ Weekly_Voyage_Count    : num [1:2736] 1 6 9 1 8 7 3 6 8 2 ...\n $ Average_Load_Percentage: num [1:2736] 93.8 93.9 96.2 66.2 80 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Date = col_date(format = \"%Y-%m-%d\"),\n  ..   Ship_Type = col_character(),\n  ..   Route_Type = col_character(),\n  ..   Engine_Type = col_character(),\n  ..   Maintenance_Status = col_character(),\n  ..   Speed_Over_Ground_knots = col_double(),\n  ..   Engine_Power_kW = col_double(),\n  ..   Distance_Traveled_nm = col_double(),\n  ..   Draft_meters = col_double(),\n  ..   Weather_Condition = col_character(),\n  ..   Cargo_Weight_tons = col_double(),\n  ..   Operational_Cost_USD = col_double(),\n  ..   Revenue_per_Voyage_USD = col_double(),\n  ..   Turnaround_Time_hours = col_double(),\n  ..   Efficiency_nm_per_kWh = col_double(),\n  ..   Seasonal_Impact_Score = col_double(),\n  ..   Weekly_Voyage_Count = col_double(),\n  ..   Average_Load_Percentage = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-pre-processing",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Data Pre-processing",
    "text": "Data Pre-processing\nFrom the summary statistics of the dataset, it is observed that there are missing values ‘none’ in the dataset.\n\n\n[1] 0\n\n\n                   Date               Ship_Type              Route_Type \n                      0                     136                     136 \n            Engine_Type      Maintenance_Status Speed_Over_Ground_knots \n                    136                     136                       0 \n        Engine_Power_kW    Distance_Traveled_nm            Draft_meters \n                      0                       0                       0 \n      Weather_Condition       Cargo_Weight_tons    Operational_Cost_USD \n                    136                       0                       0 \n Revenue_per_Voyage_USD   Turnaround_Time_hours   Efficiency_nm_per_kWh \n                      0                       0                       0 \n  Seasonal_Impact_Score     Weekly_Voyage_Count Average_Load_Percentage \n                      0                       0                       0 \n\n\n\n\n[1] \"Number of rows with at least one NA: 609\"\n\n\n[1] \"Corrected Percentage of rows with missing values: 22.26 %\"\n\n\nSince the total missing values is &gt;5% of total rows, removing them will significantly impact the dataset. Therefore, we will not be removing rows containing None.\n\ncategorical_cols &lt;- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Maintenance_Status\", \"Weather_Condition\")  # List of categorical columns\ndf[categorical_cols] &lt;- lapply(df[categorical_cols], function(x) ifelse(is.na(x), \"Unknown\", x))\n\nNext, binning and feature engineering will be done before analysis is done.\nTo improve trend analysis and facilitate meaningful comparisons, the dataset was binned into Month perios. This helps to identify seasonality and trends in voyages while reducing noise from daily fluctuations. A Profit column was introduced to measure voyage profitability, enabling insights into cost efficiency and revenue impact over time.\n\n# Create a new column for Year-Month binning\ndf &lt;- df %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%  # Truncate date to the first day of the month \n  mutate(Profit = Revenue_per_Voyage_USD - Operational_Cost_USD)  # Calculate profit\n\n\n\ntibble [2,736 × 20] (S3: tbl_df/tbl/data.frame)\n $ Date                   : Date[1:2736], format: \"2023-06-04\" \"2023-06-11\" ...\n $ Ship_Type              : chr [1:2736] \"Container Ship\" \"Fish Carrier\" \"Container Ship\" \"Bulk Carrier\" ...\n $ Route_Type             : chr [1:2736] \"Unknown\" \"Short-haul\" \"Long-haul\" \"Transoceanic\" ...\n $ Engine_Type            : chr [1:2736] \"Heavy Fuel Oil (HFO)\" \"Steam Turbine\" \"Diesel\" \"Steam Turbine\" ...\n $ Maintenance_Status     : chr [1:2736] \"Critical\" \"Good\" \"Fair\" \"Fair\" ...\n $ Speed_Over_Ground_knots: num [1:2736] 12.6 10.4 20.7 21.1 13.7 ...\n $ Engine_Power_kW        : num [1:2736] 2063 1796 1649 915 1090 ...\n $ Distance_Traveled_nm   : num [1:2736] 1031 1060 659 1127 1445 ...\n $ Draft_meters           : num [1:2736] 14.13 14.65 7.2 11.79 9.73 ...\n $ Weather_Condition      : chr [1:2736] \"Moderate\" \"Rough\" \"Moderate\" \"Moderate\" ...\n $ Cargo_Weight_tons      : num [1:2736] 1959 162 178 1737 261 ...\n $ Operational_Cost_USD   : num [1:2736] 483832 483388 448543 261350 287718 ...\n $ Revenue_per_Voyage_USD : num [1:2736] 292183 883766 394019 87551 676121 ...\n $ Turnaround_Time_hours  : num [1:2736] 25.9 63.2 49.4 22.4 64.2 ...\n $ Efficiency_nm_per_kWh  : num [1:2736] 1.455 0.29 0.5 0.703 1.331 ...\n $ Seasonal_Impact_Score  : num [1:2736] 1.416 0.886 1.406 1.371 0.583 ...\n $ Weekly_Voyage_Count    : num [1:2736] 1 6 9 1 8 7 3 6 8 2 ...\n $ Average_Load_Percentage: num [1:2736] 93.8 93.9 96.2 66.2 80 ...\n $ Month                  : Date[1:2736], format: \"2023-06-01\" \"2023-06-01\" ...\n $ Profit                 : num [1:2736] -191649 400378 -54525 -173798 388403 ..."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#multivariate-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#multivariate-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Multivariate Analysis",
    "text": "Multivariate Analysis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#outlier-detection",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#outlier-detection",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Outlier Detection",
    "text": "Outlier Detection"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interactive-plots",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interactive-plots",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Interactive Plots",
    "text": "Interactive Plots\n\n# Convert the 'Date' column to Date type if not already\ndf$Date &lt;- as.Date(df$Date)\n\n# Summarize the data by unique combinations of Ship_Type, Route_Type, Engine_Type, and Maintenance_Status\nsummary_data &lt;- df %&gt;%\n  group_by(Ship_Type, Route_Type, Engine_Type, Maintenance_Status, Date) %&gt;%\n  summarise(\n    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Profit = sum(Revenue_per_Voyage_USD, na.rm = TRUE) - sum(Operational_Cost_USD, na.rm = TRUE),\n    .groups = \"drop\"  # ✅ Removes unnecessary grouping\n  ) \n\n# Convert Date to character to avoid animation errors\nsummary_data$Date &lt;- as.character(summary_data$Date)\n\n# Fix size scaling\nsize_range &lt;- range(summary_data$Total_Operational_Cost, na.rm = TRUE)\nsize_scaled &lt;- scales::rescale(summary_data$Total_Operational_Cost, to = c(5, 50)) # Ensure reasonable size scaling\n\n# Create an interactive plot with plotly and add a slider for the date range\nbp &lt;- plot_ly(\n  data = summary_data,\n  x = ~Total_Operational_Cost, \n  y = ~Total_Revenue, \n  size = ~size_scaled,  # ✅ Use scaled size to prevent extreme bubbles\n  color = ~Maintenance_Status,  # ✅ Keep categorical color mapping\n  frame = ~Date,  # ✅ Ensure Date is character type\n  text = ~paste(\"Ship Type:\", Ship_Type,\n                \"&lt;br&gt;Route Type:\", Route_Type,\n                \"&lt;br&gt;Engine Type:\", Engine_Type,\n                \"&lt;br&gt;Maintenance Status:\", Maintenance_Status,\n                \"&lt;br&gt;Date:\", Date,\n                \"&lt;br&gt;Profit (USD):\", Profit),\n  hoverinfo = \"text\",  # ✅ Display text when hovering over points\n  type = 'scatter', \n  mode = 'markers'  # ✅ Ensure no unintended line elements\n) %&gt;%\n  layout(\n    title = \"Operational Cost vs Revenue per Voyage\",\n    xaxis = list(title = \"Total Operational Cost (USD)\"),\n    yaxis = list(title = \"Total Revenue per Voyage (USD)\"),\n    showlegend = TRUE\n  ) %&gt;%\n  animation_opts(\n    frame = 100, \n    redraw = TRUE\n  ) %&gt;%\n  animation_slider(\n    currentvalue = list(prefix = \"Date: \")\n  )\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\n\n# Display the plot\nbp\n\n\n\n\n\n\n# Summarize the data by unique combinations of Ship_Type, Route_Type, Engine_Type, and Maintenance_Status\nsummary_data &lt;- df %&gt;%\n  group_by(Ship_Type, Route_Type, Engine_Type, Maintenance_Status) %&gt;%\n  summarise(\n    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE)\n  )\n\n`summarise()` has grouped output by 'Ship_Type', 'Route_Type', 'Engine_Type'.\nYou can override using the `.groups` argument.\n\n# Check if the summarization gives you 144 rows (should be the case)\nnrow(summary_data)\n\n[1] 144\n\n# Create an interactive scatter plot with plotly\ninteractive_plot &lt;- plot_ly(summary_data, \n                            x = ~Total_Operational_Cost, \n                            y = ~Total_Revenue, \n                            color = ~Ship_Type, \n                            size = ~Total_Operational_Cost, \n                            type = 'scatter', \n                            mode = 'markers', \n                            text = ~paste(\"Ship Type:\", Ship_Type,\n                                          \"&lt;br&gt;Route Type:\", Route_Type,\n                                          \"&lt;br&gt;Engine Type:\", Engine_Type,\n                                          \"&lt;br&gt;Maintenance Status:\", Maintenance_Status)) %&gt;%\n  layout(\n    title = \"Operational Cost vs Revenue per Voyage\",\n    xaxis = list(title = \"Total Operational Cost (USD)\"),\n    yaxis = list(title = \"Total Revenue per Voyage (USD)\"),\n    showlegend = TRUE\n  )\n\n# Display the plot\ninteractive_plot\n\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values.\nWarning: `line.width` does not currently support multiple values."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profit-trends-by-ship-type",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profit-trends-by-ship-type",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Profit Trends by Ship Type",
    "text": "Profit Trends by Ship Type\n\ndf %&gt;%\n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y = Profit), \n               origin = \"midpoint\", \n               horizonscale = 6) +\n  facet_grid(Ship_Type~.) +\n  theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  labs(title = \"Profit Trends by Ship Type (Jan 2018 to Present)\",\n       x = \"Date\", y = \"Profit (USD)\") +\n  theme(\n    panel.spacing.y = unit(0, \"lines\"), \n    strip.text.y = element_text(size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n  ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\")\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#weather-condition-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#weather-condition-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Weather Condition Analysis",
    "text": "Weather Condition Analysis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#container-ship---steam-turbine",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#container-ship---steam-turbine",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Container Ship - Steam Turbine",
    "text": "Container Ship - Steam Turbine"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#p-value-0.00146-significant-at-0.01-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#p-value-0.00146-significant-at-0.01-level",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "p-value: 0.00146 (Significant at 0.01 level)",
    "text": "p-value: 0.00146 (Significant at 0.01 level)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interpretation-there-is-a-significant-difference-in-operational-costs-across-different-maintenance-statuses-p-0.05.-you-can-explore-which-maintenance-levels-contribute-to-the-difference-using-post-hoc-tests-e.g.-tukey-hsd.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interpretation-there-is-a-significant-difference-in-operational-costs-across-different-maintenance-statuses-p-0.05.-you-can-explore-which-maintenance-levels-contribute-to-the-difference-using-post-hoc-tests-e.g.-tukey-hsd.",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Interpretation: There is a significant difference in operational costs across different maintenance statuses (p < 0.05). You can explore which maintenance levels contribute to the difference using post-hoc tests (e.g., Tukey HSD).",
    "text": "Interpretation: There is a significant difference in operational costs across different maintenance statuses (p &lt; 0.05). You can explore which maintenance levels contribute to the difference using post-hoc tests (e.g., Tukey HSD)."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bulk-carrier---heavy-fuel-oil-hfo",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#bulk-carrier---heavy-fuel-oil-hfo",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Bulk Carrier - Heavy Fuel Oil (HFO)",
    "text": "Bulk Carrier - Heavy Fuel Oil (HFO)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#p-value-0.00383-significant-at-0.01-level",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#p-value-0.00383-significant-at-0.01-level",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "p-value: 0.00383 (Significant at 0.01 level)",
    "text": "p-value: 0.00383 (Significant at 0.01 level)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interpretation-there-is-a-significant-difference-in-operational-costs-across-different-maintenance-statuses-p-0.05.-again-post-hoc-tests-like-tukey-hsd-can-be-run-to-identify-which-maintenance-statuses-differ.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#interpretation-there-is-a-significant-difference-in-operational-costs-across-different-maintenance-statuses-p-0.05.-again-post-hoc-tests-like-tukey-hsd-can-be-run-to-identify-which-maintenance-statuses-differ.",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Interpretation: There is a significant difference in operational costs across different maintenance statuses (p < 0.05). Again, post-hoc tests like Tukey HSD can be run to identify which maintenance statuses differ.",
    "text": "Interpretation: There is a significant difference in operational costs across different maintenance statuses (p &lt; 0.05). Again, post-hoc tests like Tukey HSD can be run to identify which maintenance statuses differ.\n\n# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)\ncontainer_ship_steamturbine_data &lt;- subset(df, Ship_Type == \"Container Ship\" & Engine_Type == \"Steam Turbine\")\n\n# Run ANOVA for Operational Cost by Maintenance Status\nanova_model_hfo &lt;- aov(Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)\n\n# Run the Tukey HSD test\ntukey_test &lt;- TukeyHSD(anova_model_hfo)\n\n# Print the results of the Tukey test\nprint(tukey_test)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)\n\n$Maintenance_Status\n                  diff        lwr      upr     p adj\nFair-Critical 45571.73 -13059.795 104203.3 0.1604984\nGood-Critical 95727.44  34271.366 157183.5 0.0008977\nGood-Fair     50155.71  -9909.121 110220.5 0.1217145\n\n\n\n\n\n\n\n\nTukey HSD test results for the Container Ship (Steam Turbine) above:\n\n\n\n✅ Fair vs. Critical: ✅ The difference in operational costs between “Fair” and “Critical” maintenance status is 45,571.73 USD. The confidence interval for this difference ranges from -13,059.80 USD to 104,203.30 USD. The p-value is 0.1605, which is not statistically significant (p &gt; 0.05). This suggests that the operational cost is not significantly different between the “Fair” and “Critical” maintenance statuses.\n✅ Good vs. Critical: ✅The difference in operational costs between “Good” and “Critical” maintenance status is 95,727.44 USD. The confidence interval for this difference ranges from 34,271.37 USD to 157,183.50 USD. The p-value is 0.0009, which is statistically significant (p &lt; 0.05). This indicates that the operational cost is significantly different between the “Good” and “Critical” maintenance statuses.\n✅ Good vs. Fair: ✅ The difference in operational costs between “Good” and “Fair” maintenance status is 50,155.71 USD. The confidence interval for this difference ranges from -9,909.12 USD to 110,220.50 USD. The p-value is 0.1217, which is not statistically significant (p &gt; 0.05). This indicates that the operational cost is not significantly different between the “Good” and “Fair” maintenance statuses.\n✅ Summary: ✅ The Good vs. Critical comparison is statistically significant, indicating that the maintenance status between “Good” and “Critical” has a significant effect on operational costs. The Fair vs. Critical and Good vs. Fair comparisons are not statistically significant, suggesting that there is no significant difference in operational costs between these groups for Container Ship - Steam Turbine.\n\n\n\n\n▶ Show the code\n\n\n# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)\nbulk_carrier_hfo_data &lt;- subset(df, Ship_Type == \"Bulk Carrier\" & Engine_Type == \"Heavy Fuel Oil (HFO)\")\n\n# Run ANOVA for Operational Cost by Maintenance Status\nanova_model_hfo &lt;- aov(Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)\n\n# Run the Tukey HSD test\ntukey_test &lt;- TukeyHSD(anova_model_hfo)\n\n# Print the results of the Tukey test\nprint(tukey_test)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)\n\n$Maintenance_Status\n                    diff        lwr       upr     p adj\nFair-Critical -70404.315 -126508.99 -14299.64 0.0095550\nGood-Critical   2772.817  -57093.13  62638.76 0.9934194\nGood-Fair      73177.132   12542.89 133811.38 0.0133808\n\n\n\n\n\n\n\n\nTukey HSD test results for the Bulk Carrier (HFO) above:\n\n\n\n✅ Fair vs. Critical: ✅ The difference in operational costs between “Fair” and “Critical” maintenance status is -70,404.32 USD. The confidence interval for this difference ranges from -126,508.99 USD to -14,299.64 USD. The p-value is 0.0096, which is statistically significant (p &lt; 0.05). This indicates that the operational cost is significantly different between the “Fair” and “Critical” maintenance statuses.\n✅ Good vs. Critical: ✅ The difference in operational costs between “Good” and “Critical” maintenance status is 2,772.82 USD. The confidence interval for this difference ranges from -57,093.13 USD to 62,638.76 USD. The p-value is 0.9934, which is not statistically significant (p &gt; 0.05). This indicates that the operational ## cost is not significantly different between the “Good” and “Critical” maintenance statuses.\n✅ Good vs. Fair: ✅ The difference in operational costs between “Good” and “Fair” maintenance status is 73,177.13 USD. The confidence interval for this difference ranges from 12,542.89 USD to 133,811.38 USD. The p-value is 0.0134, which is statistically significant (p &lt; 0.05). This suggests that the operational cost ## is significantly different between the “Good” and “Fair” maintenance statuses.\n✅ Summary: ✅ The Fair vs. Critical comparison and the Good vs. Fair comparison are statistically significant, indicating that maintenance status does have an effect on operational costs. The Good vs. Critical comparison is not statistically significant, suggesting that maintenance status between “Good” and “Critical” may not have a significant impact on operational cost for Bulk Carrier - Heavy Fuel Oil (HFO).\n\n\n\n\n▶ Show the code"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#httpswww.iss.europa.eupublicationsbriefsdeep-waters-maritime-security-landscape-gulf-guinea",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#httpswww.iss.europa.eupublicationsbriefsdeep-waters-maritime-security-landscape-gulf-guinea",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "https://www.iss.europa.eu/publications/briefs/deep-waters-maritime-security-landscape-gulf-guinea",
    "text": "https://www.iss.europa.eu/publications/briefs/deep-waters-maritime-security-landscape-gulf-guinea"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#httpswww.eeas.europa.eusitesdefaultfilesnote_eu_gog_strategy.pdf",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#httpswww.eeas.europa.eusitesdefaultfilesnote_eu_gog_strategy.pdf",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "https://www.eeas.europa.eu/sites/default/files/note_eu_gog_strategy.pdf",
    "text": "https://www.eeas.europa.eu/sites/default/files/note_eu_gog_strategy.pdf"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-the-profitability-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plotting-the-profitability-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Plotting the Profitability Analysis",
    "text": "Plotting the Profitability Analysis\n\ndf_new &lt;- df %&gt;%\n  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)\n\n# Analyze Profit by Ship_Type, Engine_Type, and Route_Type\nprofit_analysis &lt;- df_new %&gt;%\n  group_by(Ship_Type, Engine_Type, Route_Type) %&gt;%\n  summarise(Average_Profit = mean(Profit_per_Voyage_USD),\n            Total_Profit = sum(Profit_per_Voyage_USD),\n            Count = n(), .groups = 'drop')\n\n# Create ggplot with interactive tooltips\np &lt;- ggplot(profit_analysis, aes(x = Ship_Type, y = Average_Profit, fill = Engine_Type,\n                                 text = paste(\"Ship Type:\", Ship_Type,\n                                              \"&lt;br&gt;Engine Type:\", Engine_Type,\n                                              \"&lt;br&gt;Route Type:\", Route_Type,\n                                              \"&lt;br&gt;Avg Profit (USD):\", round(Average_Profit, 2)))) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  facet_wrap(~ Route_Type) +\n  theme_minimal() +\n  labs(title = \"Average Profit by Ship Type, Engine Type, and Route Type\",\n       y = \"Average Profit (USD)\",\n       x = \"Ship Type\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot to an interactive plot\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Profitability Analysis",
    "text": "Profitability Analysis\n\n\n# A tibble: 5 × 4\n  Ship_Type      Average_Profit Total_Profit Count\n  &lt;chr&gt;                   &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 Bulk Carrier          264340.   176843528.   669\n2 Container Ship        266019.   168921842.   635\n3 Fish Carrier          274711.   179386434.   653\n4 Tanker                252536.   162380656.   643\n5 Unknown               300308.    40841951.   136\n\n\n# A tibble: 4 × 4\n  Engine_Type          Average_Profit Total_Profit Count\n  &lt;chr&gt;                         &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 Diesel                      273444.   243912404.   892\n2 Heavy Fuel Oil (HFO)        258494.   220495779.   853\n3 Steam Turbine               271503.   232135292.   855\n4 Unknown                     234051.    31830936.   136\n\n\n# A tibble: 5 × 4\n  Route_Type   Average_Profit Total_Profit Count\n  &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt; &lt;int&gt;\n1 Coastal             265395.   172506862.   650\n2 Long-haul           273592.   187684270.   686\n3 Short-haul          268698.   168204855.   626\n4 Transoceanic        257577.   164334441.   638\n5 Unknown             262088.    35643983.   136\n\n\nProfitability by Ship Type: Fish Carriers generate the highest average profit, while Bulk Carriers generate the highest total profit. Profitability by Engine Type: Diesel and Steam Turbine engines are more profitable than Heavy Fuel Oil engines. Profitability by Route Type: Long-haul routes are the most profitable, while Transoceanic routes have the lowest average profit.\n\n\nClick here to show the R code\ndf_new &lt;- df %&gt;%\n  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)\n\n# Analyze Profit by Ship_Type\nprofit_by_ship_type &lt;- df_new %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarise(Average_Profit = mean(Profit_per_Voyage_USD),\n            Total_Profit = sum(Profit_per_Voyage_USD),\n            Count = n())\n\n# Analyze Profit by Engine_Type\nprofit_by_engine_type &lt;- df_new %&gt;%\n  group_by(Engine_Type) %&gt;%\n  summarise(Average_Profit = mean(Profit_per_Voyage_USD),\n            Total_Profit = sum(Profit_per_Voyage_USD),\n            Count = n())\n\n# Analyze Profit by Route_Type\nprofit_by_route_type &lt;- df_new %&gt;%\n  group_by(Route_Type) %&gt;%\n  summarise(Average_Profit = mean(Profit_per_Voyage_USD),\n            Total_Profit = sum(Profit_per_Voyage_USD),\n            Count = n())\n\n# Display results\nprint(profit_by_ship_type)\nprint(profit_by_engine_type)\nprint(profit_by_route_type)\n\n\n\nPlotting the Profitability Analysis\n\n\n\n\n\n\nLong-haul and Short-haul routes are more profitable than Coastal or Transoceanic routes. Ship type doesn’t drastically impact profitability, but there are variations in certain categories. Engine type does not show a major impact on profitability, except in a few cases. The “Unknown” category shows high variability, suggesting potential data inconsistencies or exceptional cases.\n\n\nClick here to show the R code\ndf_new &lt;- df %&gt;%\n  mutate(Profit_per_Voyage_USD = Revenue_per_Voyage_USD - Operational_Cost_USD)\n\n# Analyze Profit by Ship_Type, Engine_Type, and Route_Type\nprofit_analysis &lt;- df_new %&gt;%\n  group_by(Ship_Type, Engine_Type, Route_Type) %&gt;%\n  summarise(Average_Profit = mean(Profit_per_Voyage_USD),\n            Total_Profit = sum(Profit_per_Voyage_USD),\n            Count = n(), .groups = 'drop')\n\n# Create ggplot with interactive tooltips\np &lt;- ggplot(profit_analysis, aes(x = Ship_Type, y = Average_Profit, fill = Engine_Type,\n                                 text = paste(\"Ship Type:\", Ship_Type,\n                                              \"&lt;br&gt;Engine Type:\", Engine_Type,\n                                              \"&lt;br&gt;Route Type:\", Route_Type,\n                                              \"&lt;br&gt;Avg Profit (USD):\", round(Average_Profit, 2)))) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  facet_wrap(~ Route_Type) +\n  theme_minimal() +\n  labs(title = \"Average Profit by Ship Type, Engine Type, and Route Type\",\n       y = \"Average Profit (USD)\",\n       x = \"Ship Type\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Convert ggplot to an interactive plot\nggplotly(p, tooltip = \"text\")\n\n\n\n\nRidgeline Plot\n\n\nPicking joint bandwidth of 112000\n\n\n\n\n\n\n\n\n\nThis is a ridgeline plot, which is used to visualize the distribution of a numerical variable (Profit per Voyage in USD) across multiple categorical groups (Ship Type and Route Type). The density curves show the profit distribution for each Ship Type and Route Type. Different ship types experience varying profit distributions, with some being more stable (Bulk Carrier, Container Ship) and others more volatile (Tanker, Fish Carrier). Route type significantly influences profitability, with Short-haul and Transoceanic routes showing more stable profit distributions. Some voyages result in losses, particularly for Tanker and Fish Carrier types, suggesting that these ships may have more unpredictable profitability.\n\n\nClick here to show the R code\nggplot(df_new, aes(x = Profit_per_Voyage_USD, y = Ship_Type, fill = Route_Type)) +\n  geom_density_ridges(alpha = 0.7) +\n  labs(title = \"Ridgeline Plot: Profit Distribution by Ship Type and Route\",\n       x = \"Profit per Voyage (USD)\", \n       y = \"Ship Type\",\n       fill = \"Route Type\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#turnaround-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#turnaround-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Turnaround Analysis",
    "text": "Turnaround Analysis\n\n\n# A tibble: 20 × 4\n   Weather_Condition Route_Type   Average_Turnaround_Time Count\n   &lt;chr&gt;             &lt;chr&gt;                          &lt;dbl&gt; &lt;int&gt;\n 1 Calm              Coastal                         41.6   214\n 2 Calm              Long-haul                       41.3   245\n 3 Calm              Short-haul                      41.5   192\n 4 Calm              Transoceanic                    42.5   192\n 5 Calm              Unknown                         39.3    50\n 6 Moderate          Coastal                         39.7   211\n 7 Moderate          Long-haul                       41.8   209\n 8 Moderate          Short-haul                      42.5   222\n 9 Moderate          Transoceanic                    42.5   208\n10 Moderate          Unknown                         42.3    41\n11 Rough             Coastal                         42.4   202\n12 Rough             Long-haul                       44.2   197\n13 Rough             Short-haul                      41.0   180\n14 Rough             Transoceanic                    41.2   197\n15 Rough             Unknown                         41.2    40\n16 Unknown           Coastal                         35.8    23\n17 Unknown           Long-haul                       40.8    35\n18 Unknown           Short-haul                      44.8    32\n19 Unknown           Transoceanic                    39.4    41\n20 Unknown           Unknown                         46.5     5\n\n\nRough weather increases turnaround time, especially for Long-haul and Unknown Route Types. Shorter routes (Coastal and Short-haul) tend to have lower turnaround times, even under adverse weather conditions.\n\n\nClick here to show the R code\nturnaround_analysis &lt;- df %&gt;%\n  group_by(Weather_Condition, Route_Type) %&gt;%\n  summarise(Average_Turnaround_Time = mean(Turnaround_Time_hours),\n            Count = n(), .groups = 'drop')\n\n# Display results\nprint(turnaround_analysis)\n\n\n\n\n\n\n\n\n\n\n\nEffect of Weather Conditions on Turnaround Time:\nTurnaround time appears to increase slightly from calm to rough weather, especially for Long-haul and Coastal routes. The impact of weather is relatively minor, suggesting that ships may have efficient contingency plans. Comparison Between Route Types:\nShort-haul and Transoceanic routes have consistently higher turnaround times compared to Coastal and Long-haul routes, regardless of weather conditions. Long-haul routes experience the highest turnaround time in rough weather, possibly due to longer distances and greater exposure to adverse conditions. Operational Considerations:\nIf rough weather significantly increases turnaround time, shipping companies may need better port efficiency strategies or adjustments in scheduling. Coastal routes may be less affected, indicating shorter processing times at ports.\n\n\nClick here to show the R code\n# Visualize Turnaround Time\n# Bar plot to show Average Turnaround Time by Weather_Condition and Route_Type\nggplot(turnaround_analysis, aes(x = Weather_Condition, y = Average_Turnaround_Time, fill = Route_Type)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  theme_minimal() +\n  labs(title = \"Average Turnaround Time by Weather Condition and Route Type\",\n       y = \"Average Turnaround Time (hours)\",\n       x = \"Weather Condition\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\n\nLong-haul and Transoceanic routes generally exhibit lower efficiency (dark blue and purple), particularly for Tankers and Fish Carriers. This suggests that fuel consumption increases significantly for longer distances, possibly due to higher cargo weights, fuel type inefficiencies, or unfavorable sea conditions. Container Ships have moderate efficiency across all routes, possibly due to optimized fuel consumption and operational strategies. Bulk Carriers and Tankers show variable efficiency depending on the route type. Fish Carriers consistently exhibit low efficiency, which could be linked to frequent stops, variable cargo loads, or operational inefficiencies.\n\n\nClick here to show the R code\ndf %&gt;%\n  group_by(Ship_Type, Route_Type) %&gt;%\n  summarise(Avg_Efficiency = mean(Efficiency_nm_per_kWh, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  ggplot(aes(x = Ship_Type, y = Route_Type, fill = Avg_Efficiency)) +\n  geom_tile() +\n  scale_fill_viridis_c(option = \"plasma\") +  # Enhances color visibility\n  theme_minimal() +\n  labs(title = \"Heatmap of Average Efficiency by Ship Type and Route Type\",\n       x = \"Ship Type\",\n       y = \"Route Type\",\n       fill = \"Avg Efficiency (nm/kWh)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#advanced-data-visualisation",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#advanced-data-visualisation",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Advanced Data Visualisation",
    "text": "Advanced Data Visualisation\n\nInteractive Plots\n\n\n\n\n\n\nRevenue Increases with Operational Cost but with High Variability\nWhile there is some correlation between operational cost and revenue, the scatter pattern suggests high variability, meaning that higher operational cost does not always lead to higher revenue. Overlap Among Route Types\nThe five route types overlap significantly, meaning that no single route type has a clear advantage in terms of cost vs. revenue. This suggests that other factors, such as cargo type, fuel efficiency, and weather conditions, might play a bigger role in determining revenue. Clusters of High-Cost, High-Revenue Voyages\nSome bubbles are concentrated in the top-right quadrant, representing voyages with both high operational costs and high revenue. These voyages could correspond to high-value cargo or long-distance shipments. Presence of Low Revenue, High Operational Cost Voyages\nThere are some voyages with high operational costs but relatively low revenue. These may represent inefficient voyages, poor cargo utilization, or increased fuel consumption due to weather or maintenance issues.\n\n\nClick here to show the R code\n# Get unique Route Types\nroute_types &lt;- unique(df$Route_Type)\n\n# Create a scatter plot for each Route Type but set them hidden by default\nplot_list &lt;- list()\nvisibility_list &lt;- list()\n\n# ✅ Create the traces for each Route Type\nfor (i in seq_along(route_types)) {\n  route_data &lt;- df %&gt;% filter(Route_Type == route_types[i])\n  \n  plot_list[[i]] &lt;- list(\n    x = jitter(route_data$Operational_Cost_USD, amount = 10000),  # ✅ Reduce overlap\n    y = jitter(route_data$Revenue_per_Voyage_USD, amount = 10000),\n    mode = \"markers\",\n    type = \"scatter\",  # ✅ Explicitly specify scatter type\n    marker = list(size = route_data$Cargo_Weight_tons / 100,  # ✅ Reduce bubble size\n                  opacity = 0.6),  # ✅ Make bubbles slightly transparent\n    name = route_types[i],  # Legend name\n    text = paste(\n      \"Ship Type:\", route_data$Ship_Type,\n      \"&lt;br&gt;Engine Type:\", route_data$Engine_Type,\n      \"&lt;br&gt;Maintenance Status:\", route_data$Maintenance_Status,\n      \"&lt;br&gt;Cargo Weight (tons):\", route_data$Cargo_Weight_tons,\n      \"&lt;br&gt;Profit (USD):\", route_data$Profit\n    ),\n    hoverinfo = \"text\",\n    visible = ifelse(i == 1, TRUE, \"legendonly\")  # ✅ Show only first Route Type initially\n  )\n}\n\n# ✅ Create \"All\" Option to show all Route Types\nall_visibility &lt;- rep(TRUE, length(plot_list))  # ✅ Ensures all traces are visible when \"All\" is selected\n\n# ✅ Add \"All\" Button for Dropdown\nall_button &lt;- list(\n  method = \"update\",\n  args = list(list(visible = all_visibility)),\n  label = \"All\"\n)\n\n# ✅ Add Individual Route Type Buttons\nfor (i in seq_along(route_types)) {\n  visibility_list[[i]] &lt;- list(\n    method = \"update\",\n    args = list(list(visible = rep(FALSE, length(route_types)))),\n    label = route_types[i]\n  )\n  visibility_list[[i]]$args[[1]]$visible[i] &lt;- TRUE\n}\n\n# ✅ Add \"All\" option at the start of the dropdown\nvisibility_list &lt;- append(list(all_button), visibility_list)\n\n# ✅ Create Plotly Figure\np &lt;- plot_ly()\n\nfor (plot in plot_list) {\n  p &lt;- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, \n                 type = \"scatter\",  # ✅ Explicitly specify scatter type\n                 marker = plot$marker, name = plot$name, \n                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)\n}\n\n# ✅ Add dropdown filter with \"All\" option\np &lt;- layout(p,\n            title = \"Operational Cost vs Revenue (Filtered by Route Type)\",\n            xaxis = list(title = \"Operational Cost (USD)\"),\n            yaxis = list(title = \"Revenue per Voyage (USD)\"),\n            showlegend = TRUE,\n            updatemenus = list(\n              list(\n                buttons = visibility_list,\n                direction = \"down\",\n                showactive = TRUE,\n                x = 0.15,  # Position of dropdown\n                y = 1.15\n              )\n            ))\n\n# ✅ Display the plot\np"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#time-series-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#time-series-analysis",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Time-Series Analysis",
    "text": "Time-Series Analysis\n\n\n\n\n\n\nThis interactive chart provides valuable insights into how operational costs impact revenue across different shipping routes and months. User can select the route type and months for easy comparison. It highlights potential profitable routes, seasonal trends, and areas for operational improvement. Government officials and shipping companies can use this data to make better strategic decisions to improve efficiency and profitability.\n\n\nClick here to show the R code\n# Compute Monthly Aggregation (Sum) by Route Type\ndf_monthly &lt;- df %&gt;%\n  mutate(Month = floor_date(Date, \"month\")) %&gt;%  # ✅ Extract month\n  group_by(Route_Type, Month) %&gt;%\n  summarise(\n    Total_Operational_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Profit = sum(Revenue_per_Voyage_USD, na.rm = TRUE) - sum(Operational_Cost_USD, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(Month)  # ✅ Ensure months are sorted correctly\n\n# Get unique Route Types & Months\nroute_types &lt;- unique(df_monthly$Route_Type)\nmonth_list &lt;- unique(df_monthly$Month)\n\n# Initialize storage for traces\nplot_list &lt;- list()\n\n# ✅ Create a scatter plot for each Route Type & Month (All visible)\nfor (i in seq_along(route_types)) {\n  for (j in seq_along(month_list)) {\n    \n    route_month_data &lt;- df_monthly %&gt;% \n      filter(Route_Type == route_types[i], Month == month_list[j])\n    \n    if (nrow(route_month_data) &gt; 0) {\n      trace &lt;- list(\n        x = jitter(route_month_data$Total_Operational_Cost, amount = 50000),  # ✅ Reduce clustering\n        y = jitter(route_month_data$Total_Revenue, amount = 50000),\n        mode = \"markers\",\n        type = \"scatter\",  # ✅ Explicitly specify scatter type\n        marker = list(size = route_month_data$Total_Profit / 1000000, opacity = 0.7),  # ✅ Scaled size & transparency\n        name = paste(route_types[i], format(month_list[j], \"%B %Y\")),  # ✅ Improve legend readability\n        text = paste(\n          \"Route Type:\", route_types[i],\n          \"&lt;br&gt;Month:\", format(route_month_data$Month, \"%B %Y\"),\n          \"&lt;br&gt;Total Operational Cost: $\", formatC(route_month_data$Total_Operational_Cost, big.mark = \",\"),\n          \"&lt;br&gt;Total Revenue: $\", formatC(route_month_data$Total_Revenue, big.mark = \",\"),\n          \"&lt;br&gt;Total Profit: $\", formatC(route_month_data$Total_Profit, big.mark = \",\")\n        ),\n        hoverinfo = \"text\",\n        visible = TRUE  # ✅ Show all by default\n      )\n      \n      plot_list[[length(plot_list) + 1]] &lt;- trace\n    }\n  }\n}\n\n# ✅ Create Plotly figure (No dropdowns, uses legend instead)\np &lt;- plot_ly()\n\nfor (plot in plot_list) {\n  p &lt;- add_trace(p, x = plot$x, y = plot$y, mode = plot$mode, \n                 type = \"scatter\",\n                 marker = plot$marker, name = plot$name, \n                 text = plot$text, hoverinfo = plot$hoverinfo, visible = plot$visible)\n}\n\n# ✅ Improved Layout\np &lt;- layout(p,\n            title = \"Total Monthly Operational Cost vs Revenue\",\n            xaxis = list(title = \"Total Operational Cost (USD)\"),\n            yaxis = list(title = \"Total Revenue (USD)\"),\n            showlegend = TRUE  # ✅ Users can toggle visibility via the legend\n)\n\n# ✅ Display the plot\np\n\n\n\n\n\n\n\n\nThis interactive chart allows user to view the revenue and cost over a time period. High operational costs do not always translate to higher revenue. Ships in “Unknown” maintenance status are incurring losses—data collection or maintenance intervention is needed. Ships in “Good” and “Critical” condition tend to be profitable, meaning investment in regular maintenance can be beneficial. Further analysis is needed to determine if specific ship types or routes contribute to profit/loss.\n\n\nClick here to show the R code\n# Summarize the data with averages\nsummary_data &lt;- df %&gt;%\n  group_by(Date, Maintenance_Status) %&gt;%\n  summarise(\n    Avg_Operational_Cost = mean(Operational_Cost_USD, na.rm = TRUE),\n    Avg_Revenue = mean(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Avg_Profit = mean(Profit, na.rm = TRUE),\n    .groups = \"drop\"\n  ) \n\n# Convert Date to character for animation\nsummary_data$Date &lt;- as.character(summary_data$Date)\n\n# Scale sizes\nsize_scaled &lt;- scales::rescale(summary_data$Avg_Operational_Cost, to = c(5, 50))\n\n# **Fix: Ensure Maintenance_Status is not required in breakeven_data**\nbreakeven_data &lt;- data.frame(\n  x = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE)),\n  y = c(min(summary_data$Avg_Operational_Cost, na.rm = TRUE), max(summary_data$Avg_Operational_Cost, na.rm = TRUE))\n)\n\n# Create animated scatter plot\nbp &lt;- plot_ly(\n  data = summary_data,\n  x = ~Avg_Operational_Cost, \n  y = ~Avg_Revenue, \n  size = ~size_scaled,  \n  color = ~Maintenance_Status,  # ✅ Keep this only in animated points\n  frame = ~Date,  \n  text = ~paste(\"Date:\", Date,\n                \"&lt;br&gt;Maintenance Status:\", Maintenance_Status,\n                \"&lt;br&gt;Avg Profit (USD):\", Avg_Profit),\n  hoverinfo = \"text\",\n  type = 'scatter', \n  mode = 'markers'\n) %&gt;%\n\n  # **Fix: Add breakeven line separately (no Maintenance_Status)**\n  add_trace(\n    data = breakeven_data,\n    x = ~x, \n    y = ~y, \n    type = 'scatter',\n    mode = 'lines',\n    line = list(color = 'black', dash = 'dot'),\n    name = 'Breakeven Line',\n    inherit = FALSE  # ✅ Ensure no missing column issues\n  ) %&gt;%\n\n  # Layout settings\n  layout(\n    title = \"Average Operational Cost vs Revenue per Voyage (with Breakeven Line)\",\n    xaxis = list(title = \"Average Operational Cost (USD)\"),\n    yaxis = list(title = \"Average Revenue per Voyage (USD)\"),\n    showlegend = TRUE\n  ) %&gt;%\n\n  # Slow down animation\n  animation_opts(\n    frame = 300,  # Slower animation\n    easing = \"linear\",\n    redraw = TRUE\n  ) %&gt;%\n\n  # Animation slider settings\n  animation_slider(\n    currentvalue = list(prefix = \"Date: \")\n  )\n\n# Display the plot\nbp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#statistical-testing-anova",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#statistical-testing-anova",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Statistical Testing (ANOVA)",
    "text": "Statistical Testing (ANOVA)\n\n\n$`Container Ship - Heavy Fuel Oil (HFO)`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 8.160e+10 2.720e+10   1.219  0.304\nResiduals          191 4.264e+12 2.232e+10               \n\n$`Container Ship - Steam Turbine`\n                    Df    Sum Sq   Mean Sq F value  Pr(&gt;F)   \nMaintenance_Status   3 2.819e+11 9.397e+10   4.882 0.00268 **\nResiduals          203 3.908e+12 1.925e+10                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$`Container Ship - Diesel`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 6.873e+10 2.291e+10     1.4  0.244\nResiduals          202 3.304e+12 1.636e+10               \n\n$`Container Ship - Unknown`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 4.047e+10 1.349e+10   0.588  0.629\nResiduals          23 5.280e+11 2.296e+10               \n\n$`Fish Carrier - Heavy Fuel Oil (HFO)`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 7.976e+09 2.659e+09   0.139  0.937\nResiduals          194 3.714e+12 1.915e+10               \n\n$`Fish Carrier - Steam Turbine`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 7.459e+10 2.486e+10    1.17  0.322\nResiduals          209 4.443e+12 2.126e+10               \n\n$`Fish Carrier - Diesel`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 6.681e+10 2.227e+10   1.083  0.357\nResiduals          207 4.258e+12 2.057e+10               \n\n$`Fish Carrier - Unknown`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 3.114e+09 1.038e+09   0.042  0.988\nResiduals          27 6.597e+11 2.443e+10               \n\n$`Bulk Carrier - Heavy Fuel Oil (HFO)`\n                    Df    Sum Sq   Mean Sq F value  Pr(&gt;F)   \nMaintenance_Status   3 2.654e+11 8.847e+10   4.487 0.00447 **\nResiduals          210 4.140e+12 1.972e+10                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n$`Bulk Carrier - Steam Turbine`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 9.378e+10 3.126e+10   1.447   0.23\nResiduals          201 4.341e+12 2.160e+10               \n\n$`Bulk Carrier - Diesel`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 1.047e+11 3.490e+10   1.893  0.132\nResiduals          212 3.909e+12 1.844e+10               \n\n$`Bulk Carrier - Unknown`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 6.104e+10 2.035e+10   1.037   0.39\nResiduals          30 5.886e+11 1.962e+10               \n\n$`Unknown - Heavy Fuel Oil (HFO)`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 7.056e+09 2.352e+09   0.129  0.942\nResiduals          41 7.477e+11 1.824e+10               \n\n$`Unknown - Steam Turbine`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 5.496e+10 1.832e+10   1.047  0.386\nResiduals          30 5.248e+11 1.749e+10               \n\n$`Unknown - Diesel`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 2.292e+10 7.641e+09   0.393  0.759\nResiduals          45 8.753e+11 1.945e+10               \n\n$`Unknown - Unknown`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 1.198e+11 3.993e+10   1.257  0.401\nResiduals           4 1.271e+11 3.177e+10               \n\n$`Tanker - Heavy Fuel Oil (HFO)`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 6.985e+10 2.328e+10   1.176   0.32\nResiduals          197 3.899e+12 1.979e+10               \n\n$`Tanker - Steam Turbine`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 1.024e+11 3.412e+10   1.758  0.157\nResiduals          192 3.725e+12 1.940e+10               \n\n$`Tanker - Diesel`\n                    Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status   3 4.364e+10 1.455e+10   0.765  0.515\nResiduals          206 3.919e+12 1.903e+10               \n\n$`Tanker - Unknown`\n                   Df    Sum Sq   Mean Sq F value Pr(&gt;F)\nMaintenance_Status  3 1.503e+10 5.010e+09   0.247  0.863\nResiduals          32 6.486e+11 2.027e+10               \n\n\n\n\nClick here to show the R code\n# Run ANOVA for each Ship Type & Engine Type\nanova_results &lt;- list()\n\nfor (ship in unique(df$Ship_Type)) {\n  for (engine in unique(df$Engine_Type)) {\n    \n    # Subset the data\n    subset_data &lt;- df %&gt;%\n      filter(Ship_Type == ship, Engine_Type == engine)\n    \n    # Ensure there are at least 2 unique Maintenance Status levels\n    if (length(unique(subset_data$Maintenance_Status)) &gt; 1) {\n      \n      # Run ANOVA\n      anova_model &lt;- aov(Operational_Cost_USD ~ Maintenance_Status, data = subset_data)\n      \n      # Store results\n      anova_results[[paste(ship, engine, sep = \" - \")]] &lt;- summary(anova_model)\n    }\n  }\n}\n\n# Print results\nanova_results\n\n\n\nContainer Ship - Steam Turbine\np-value: 0.00268 (Significant at the 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p &lt; 0.05). You can explore which maintenance levels contribute to the difference using post-hoc tests (e.g., Tukey HSD).\n\n\nBulk Carrier - Heavy Fuel Oil (HFO)\np-value: 0.00447 (Significant at the 0.01 level) Interpretation: There is a significant difference in operational costs across different maintenance statuses (p &lt; 0.05). Again, post-hoc tests like Tukey HSD can be run to identify which maintenance statuses differ.\n\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)\n\n$Maintenance_Status\n                       diff        lwr       upr     p adj\nFair-Critical      38212.87  -24359.90 100785.63 0.3912009\nGood-Critical      73962.84   10672.03 137253.64 0.0146931\nUnknown-Critical  -63383.95 -180561.98  53794.09 0.5000386\nGood-Fair          35749.97  -27070.43  98570.37 0.4550077\nUnknown-Fair     -101596.81 -218521.44  15327.81 0.1132892\nUnknown-Good     -137346.78 -254657.24 -20036.32 0.0144449\n\n\n\n\nClick here to show the R code\n# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)\ncontainer_ship_steamturbine_data &lt;- subset(df, Ship_Type == \"Container Ship\" & Engine_Type == \"Steam Turbine\")\n\n# Run ANOVA for Operational Cost by Maintenance Status\nanova_model_hfo &lt;- aov(Operational_Cost_USD ~ Maintenance_Status, data = container_ship_steamturbine_data)\n\n# Run the Tukey HSD test\ntukey_test &lt;- TukeyHSD(anova_model_hfo)\n\n# Print the results of the Tukey test\nprint(tukey_test)\n\n\n\n\n\n\n\n\nTukey HSD test results for the Container Ship (Steam Turbine) above:\n\n\n\nFair vs. Critical:\nThe difference in operational costs between “Fair” and “Critical” maintenance statuses is 38,212.87 USD. The confidence interval for this difference ranges from -24,359.90 USD to 100,785.63 USD. The p-value is 0.3912, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Fair” and “Critical” maintenance statuses.\nGood vs. Critical:\nThe difference in operational costs between “Good” and “Critical” maintenance statuses is 73,962.84 USD. The confidence interval for this difference ranges from 10,672.03 USD to 137,253.64 USD. The p-value is 0.0147, which is statistically significant (p &lt; 0.05). This indicates that operational costs are significantly different between the “Good” and “Critical” maintenance statuses.\nUnknown vs. Critical:\nThe difference in operational costs between “Unknown” and “Critical” maintenance statuses is -63,383.95 USD. The confidence interval for this difference ranges from -180,561.98 USD to 53,794.09 USD. The p-value is 0.5000, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Unknown” and “Critical” maintenance statuses.\nGood vs. Fair:\nThe difference in operational costs between “Good” and “Fair” maintenance statuses is 35,749.97 USD. The confidence interval for this difference ranges from -27,070.43 USD to 98,570.37 USD. The p-value is 0.4550, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Good” and “Fair” maintenance statuses.\nUnknown vs. Fair:\nThe difference in operational costs between “Unknown” and “Fair” maintenance statuses is -101,596.81 USD. The confidence interval for this difference ranges from -218,521.44 USD to 15,327.81 USD. The p-value is 0.1133, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Unknown” and “Fair” maintenance statuses.\nUnknown vs. Good:\nThe difference in operational costs between “Unknown” and “Good” maintenance statuses is -137,346.78 USD. The confidence interval for this difference ranges from -254,657.24 USD to -20,036.32 USD. The p-value is 0.0144, which is statistically significant (p &lt; 0.05). This indicates that operational costs are significantly different between the “Unknown” and “Good” maintenance statuses.\n\n\n\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)\n\n$Maintenance_Status\n                       diff         lwr        upr     p adj\nFair-Critical    -69725.364 -129594.475  -9856.253 0.0151431\nGood-Critical      1776.481  -61914.708  65467.670 0.9998644\nUnknown-Critical -85714.283 -207855.518  36426.952 0.2680400\nGood-Fair         71501.844    6307.411 136696.277 0.0253257\nUnknown-Fair     -15988.920 -138920.721 106942.882 0.9868045\nUnknown-Good     -87490.764 -212328.598  37347.070 0.2691646\n\n\n\n\nClick here to show the R code\n# Filter the dataset for Bulk Carrier and Heavy Fuel Oil (HFO)\nbulk_carrier_hfo_data &lt;- subset(df, Ship_Type == \"Bulk Carrier\" & Engine_Type == \"Heavy Fuel Oil (HFO)\")\n\n# Run ANOVA for Operational Cost by Maintenance Status\nanova_model_hfo &lt;- aov(Operational_Cost_USD ~ Maintenance_Status, data = bulk_carrier_hfo_data)\n\n# Run the Tukey HSD test\ntukey_test &lt;- TukeyHSD(anova_model_hfo)\n\n# Print the results of the Tukey test\nprint(tukey_test)\n\n\n\n\n\n\n\n\nTukey HSD test results for the Bulk Carrier (HFO) above:\n\n\n\nFair vs. Critical:\nThe difference in operational costs between “Fair” and “Critical” maintenance statuses is -69,725.36 USD. The confidence interval for this difference ranges from -129,594.48 USD to -9,856.25 USD. The p-value is 0.0151, which is statistically significant (p &lt; 0.05). This indicates that operational costs are significantly different between the “Fair” and “Critical” maintenance statuses.\nGood vs. Critical:\nThe difference in operational costs between “Good” and “Critical” maintenance statuses is 1,776.48 USD. The confidence interval for this difference ranges from -61,914.71 USD to 65,467.67 USD. The p-value is 0.9999, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Good” and “Critical” maintenance statuses.\nUnknown vs. Critical:\nThe difference in operational costs between “Unknown” and “Critical” maintenance statuses is -85,714.28 USD. The confidence interval for this difference ranges from -207,855.52 USD to 36,426.95 USD. The p-value is 0.2680, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Unknown” and “Critical” maintenance statuses.\nGood vs. Fair:\nThe difference in operational costs between “Good” and “Fair” maintenance statuses is 71,501.84 USD. The confidence interval for this difference ranges from 6,307.41 USD to 136,696.28 USD. The p-value is 0.0253, which is statistically significant (p &lt; 0.05). This indicates that operational costs are significantly different between the “Good” and “Fair” maintenance statuses.\nUnknown vs. Fair:\nThe difference in operational costs between “Unknown” and “Fair” maintenance statuses is -15,988.92 USD. The confidence interval for this difference ranges from -138,920.72 USD to 106,942.88 USD. The p-value is 0.9868, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Unknown” and “Fair” maintenance statuses.\nUnknown vs. Good:\nThe difference in operational costs between “Unknown” and “Good” maintenance statuses is -87,490.76 USD. The confidence interval for this difference ranges from -212,328.60 USD to 37,347.07 USD. The p-value is 0.2692, which is not statistically significant (p &gt; 0.05). This suggests that operational costs do not significantly differ between the “Unknown” and “Good” maintenance statuses."
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class_Ex05",
    "section": "",
    "text": "Getting Started\n\npacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggthemes, ggstatsplot)\n\nImporting the data\n\ncar_resale &lt;- \nread_xls(\"data/ToyotaCorolla.xls\", \"data\")\n\nData Overview\n\ncar_resale %&gt;%\n    ExpData(type = 1)\n\n                                          Descriptions     Value\n1                                   Sample size (nrow)      1436\n2                              No. of variables (ncol)        38\n3                    No. of numeric/interger variables        33\n4                              No. of factor variables         0\n5                                No. of text variables         5\n6                             No. of logical variables         0\n7                          No. of identifier variables         1\n8                                No. of date variables         0\n9             No. of zero variance variables (uniform)         1\n10               %. of variables having complete cases 100% (38)\n11   %. of variables having &gt;0% and &lt;50% missing cases    0% (0)\n12 %. of variables having &gt;=50% and &lt;90% missing cases    0% (0)\n13          %. of variables having &gt;=90% missing cases    0% (0)\n\ncar_resale %&gt;%\n    ExpData(type = 2)\n\n   Index    Variable_Name Variable_Type Sample_n Missing_Count Per_of_Missing\n1      1               Id       numeric     1436             0              0\n2      2            Model     character     1436             0              0\n3      3            Price       numeric     1436             0              0\n4      4        Age_08_04       numeric     1436             0              0\n5      5        Mfg_Month       numeric     1436             0              0\n6      6         Mfg_Year       numeric     1436             0              0\n7      7               KM       numeric     1436             0              0\n8      8    Quarterly_Tax       numeric     1436             0              0\n9      9           Weight       numeric     1436             0              0\n10    10 Guarantee_Period       numeric     1436             0              0\n11    11           HP_Bin     character     1436             0              0\n12    12           CC_bin     character     1436             0              0\n13    13            Doors       numeric     1436             0              0\n14    14            Gears       numeric     1436             0              0\n15    15        Cylinders       numeric     1436             0              0\n16    16        Fuel_Type     character     1436             0              0\n17    17            Color     character     1436             0              0\n18    18        Met_Color       numeric     1436             0              0\n19    19        Automatic       numeric     1436             0              0\n20    20    Mfr_Guarantee       numeric     1436             0              0\n21    21  BOVAG_Guarantee       numeric     1436             0              0\n22    22              ABS       numeric     1436             0              0\n23    23         Airbag_1       numeric     1436             0              0\n24    24         Airbag_2       numeric     1436             0              0\n25    25            Airco       numeric     1436             0              0\n26    26  Automatic_airco       numeric     1436             0              0\n27    27    Boardcomputer       numeric     1436             0              0\n28    28        CD_Player       numeric     1436             0              0\n29    29     Central_Lock       numeric     1436             0              0\n30    30  Powered_Windows       numeric     1436             0              0\n31    31   Power_Steering       numeric     1436             0              0\n32    32            Radio       numeric     1436             0              0\n33    33        Mistlamps       numeric     1436             0              0\n34    34      Sport_Model       numeric     1436             0              0\n35    35 Backseat_Divider       numeric     1436             0              0\n36    36     Metallic_Rim       numeric     1436             0              0\n37    37   Radio_cassette       numeric     1436             0              0\n38    38          Tow_Bar       numeric     1436             0              0\n   No_of_distinct_values\n1                   1436\n2                    372\n3                    236\n4                     77\n5                     12\n6                      7\n7                   1263\n8                     13\n9                     59\n10                     9\n11                     3\n12                     3\n13                     4\n14                     4\n15                     1\n16                     3\n17                    10\n18                     2\n19                     2\n20                     2\n21                     2\n22                     2\n23                     2\n24                     2\n25                     2\n26                     2\n27                     2\n28                     2\n29                     2\n30                     2\n31                     2\n32                     2\n33                     2\n34                     2\n35                     2\n36                     2\n37                     2\n38                     2\n\n\n\nlist(car_resale)\n\n[[1]]\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\n\nglimpse(car_resale)\n\nRows: 1,436\nColumns: 38\n$ Id               &lt;dbl&gt; 81, 1, 2, 3, 4, 5, 6, 7, 8, 44, 45, 46, 47, 49, 51, 6…\n$ Model            &lt;chr&gt; \"TOYOTA Corolla 1.6 5drs 1 4/5-Doors\", \"TOYOTA Coroll…\n$ Price            &lt;dbl&gt; 18950, 13500, 13750, 13950, 14950, 13750, 12950, 1690…\n$ Age_08_04        &lt;dbl&gt; 25, 23, 23, 24, 26, 30, 32, 27, 30, 27, 22, 23, 27, 2…\n$ Mfg_Month        &lt;dbl&gt; 8, 10, 10, 9, 7, 3, 1, 6, 3, 6, 11, 10, 6, 11, 11, 11…\n$ Mfg_Year         &lt;dbl&gt; 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002, 2002,…\n$ KM               &lt;dbl&gt; 20019, 46986, 72937, 41711, 48000, 38500, 61000, 9461…\n$ Quarterly_Tax    &lt;dbl&gt; 100, 210, 210, 210, 210, 210, 210, 210, 210, 234, 234…\n$ Weight           &lt;dbl&gt; 1180, 1165, 1165, 1165, 1165, 1170, 1170, 1245, 1245,…\n$ Guarantee_Period &lt;dbl&gt; 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,…\n$ HP_Bin           &lt;chr&gt; \"100-120\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100\", \"&lt; 100…\n$ CC_bin           &lt;chr&gt; \"1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", \"&gt;1600\", …\n$ Doors            &lt;dbl&gt; 5, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 5, 5, 5, 5, 3, 3,…\n$ Gears            &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,…\n$ Cylinders        &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ Fuel_Type        &lt;chr&gt; \"Petrol\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ Color            &lt;chr&gt; \"Blue\", \"Blue\", \"Silver\", \"Blue\", \"Black\", \"Black\", \"…\n$ Met_Color        &lt;dbl&gt; 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,…\n$ Automatic        &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mfr_Guarantee    &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,…\n$ BOVAG_Guarantee  &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ ABS              &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_1         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airbag_2         &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Airco            &lt;dbl&gt; 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Automatic_airco  &lt;dbl&gt; 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,…\n$ Boardcomputer    &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ CD_Player        &lt;dbl&gt; 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1,…\n$ Central_Lock     &lt;dbl&gt; 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Powered_Windows  &lt;dbl&gt; 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Power_Steering   &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Radio            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Mistlamps        &lt;dbl&gt; 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Sport_Model      &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,…\n$ Backseat_Divider &lt;dbl&gt; 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Metallic_Rim     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Radio_cassette   &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ Tow_Bar          &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\ncols &lt;- c(\"Mfg_Month\", \"HP_Bin\", \"CC_bin\", \"Doors\", \"Gears\", \"Cylinders\", \"Fuel_Type\", \"Color\", \"Met_Color\", \"Automatic\", \"Mfr_Guarantee\", \"BOVAG_Guarantee\", \"ABS\", \"Airbag_1\", \"Airbag_2\", \"Airco\", \"Automatic_airco\", \"Boardcomputer\", \"CD_Player\", \"Central_Lock\", \"Powered_Windows\", \"Power_Steering\", \"Radio\", \"Mistlamps\", \"Sport_Model\", \"Backseat_Divider\", \"Metallic_Rim\", \"Radio_cassette\", \"Tow_Bar\")\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\",\n                       sheet = \"data\") %&gt;%\n  mutate(Id = as.character(Id)) %&gt;%\n  mutate(across(all_of(cols), as.factor))\n\n\ncar_resale %&gt;%\n  ExpNumViz(target=NULL,\n            nlim=10,\n            Page=c(2,2))\n\n$`0`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncar_resale %&gt;%\n  ExpCatViz(target=NULL,\n            col = \"skyblue\",\n            clim=10,\n            margin=2,\n            Page=c(4,4),\n            sample=16\n            )\n\n$`0`\n\n\n\n\n\n\n\n\n\n\ncar_resale %&gt;%\n  ExpNumViz(target=\"Price\",\n            nlim=10,\n            Page=c(2,2))\n\n$`0`\n\n\n\n\n\n\n\n\n\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + Weight + Guarantee_Period, data = car_resale)\ncheck_normality(model1)\n\nWarning: Non-normality of residuals detected (p &lt; .001).\n\n\n\ncheck_heteroscedasticity(model1)\n\nWarning: Heteroscedasticity (non-constant error variance) detected (p &lt; .001).\n\n\n\ncheck_model(model1)\n\n\n\n\n\n\n\n\n\ntbl_regression(model1,\n               intercept = TRUE)\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n-2,186\n-4,093, -278\n0.025\n\n\nAge_08_04\n-119\n-125, -114\n&lt;0.001\n\n\nKM\n-0.02\n-0.03, -0.02\n&lt;0.001\n\n\nWeight\n20\n18, 21\n&lt;0.001\n\n\nGuarantee_Period\n27\n2.1, 52\n0.034\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\n\ntbl_regression(model1,\n               intercept = TRUE) %&gt;%\n  add_glance_source_note(\n    label = list(sigma~ \"\\U03C3\"),\n    include = c(r.squared, adj.r.squared,\n                AIC, statistic,\n                p.value, sigma))\n\n\n\n\n  \n    \n      Characteristic\n      Beta\n      95% CI1\n      p-value\n    \n  \n  \n    (Intercept)\n-2,186\n-4,093, -278\n0.025\n    Age_08_04\n-119\n-125, -114\n&lt;0.001\n    KM\n-0.02\n-0.03, -0.02\n&lt;0.001\n    Weight\n20\n18, 21\n&lt;0.001\n    Guarantee_Period\n27\n2.1, 52\n0.034\n  \n  \n    \n      R² = 0.849; Adjusted R² = 0.848; AIC = 24,915; Statistic = 2,005; p-value = &lt;0.001; σ = 1,413\n    \n  \n  \n    \n      1 CI = Confidence Interval\n    \n  \n\n\n\n\n\np_model1 &lt;- model_parameters(model1)\n\n\nplot(model_parameters(model1))\n\n\n\n\n\n\n\n\n\nggcoefstats(model1,\n            output = \"plot\")"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex04/In-Class_Ex04.html#getting-started",
    "title": "In-Class_Ex04",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels)\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nggplot(data = exam_data,\n       aes(x = ENGLISH,\n           y = CLASS)) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "",
    "text": "Cargo ship on sea by Anastasios Antoniadis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Setting the Scene",
    "text": "Setting the Scene\nThe Gulf of Guinea is a region abundant in natural resources, including oil, gas, and valuable minerals. It serves as a crucial shipping corridor, facilitating the transportation of commodities to and from Central and Southern Africa. However, it is also one of the world’s most dangerous maritime regions, plagued by piracy and security threats. In 2020, there were 78 piracy incidents, with 130 seafarers kidnapped for ransom, making it a key concern for global trade and maritime security."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#task",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Task",
    "text": "Task\nThis study aims to analyze the correlation between various factors affecting ship performance and revenue generation in the Gulf of Guinea. By identifying key influences on operational efficiency and profitability, the findings will help government officials and maritime stakeholders develop strategies to enhance ship performance, mitigate risks, and optimize trade efficiency in the region."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-distribution-across-ship-types",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-distribution-across-ship-types",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Profitability Distribution Across Ship Types",
    "text": "Profitability Distribution Across Ship Types\n\n\n\n\n\n\n\n\n\nShips in Good Maintenance (Blue) Show Higher and Stable Profits Across all ship types, ships in Good maintenance condition (blue) tend to have higher profitability and a more concentrated distribution towards positive profit. This suggests that well-maintained ships yield better financial performance with fewer loss-making voyages.\nBulk Carriers and Container Ships Exhibit Stable Profitability Bulk Carriers and Container Ships have relatively consistent profit distributions, as seen from their dense and symmetrical violin shapes. They experience fewer extreme losses compared to other ship types. The tighter boxplots indicate less profit volatility, making them a safer investment.\nTankers and Fish Carriers Show Higher Profit Variability Tankers and Fish Carriers display wider violin plots, suggesting high profit variability. While they have potential for high profits, they also experience more fluctuating earnings. The spread of profits into negative values indicates some loss-making voyages.\nShips in Critical Condition (Red) Have Higher Chances of Loss The Critical maintenance category (red) is skewed towards lower profits and losses. This suggests that poor maintenance is linked to lower revenue and increased operational costs. Fish Carriers in Critical maintenance seem to be particularly unprofitable.\nUnknown Maintenance Status (Purple) Shows an Unusual Trend Ships with Unknown maintenance status have the most unpredictable profit spread. Some unknown-status ships perform well, while others face high losses, suggesting data quality issues or inconsistent maintenance tracking.\nThe boxplots for Container Ships are relatively tighter, meaning their profits are more stable compared to other ship types.\n\n\nClick here to show the R code\n# Flip the axes\nggplot(df, \n       aes(x = Ship_Type, \n           y = Profit, \n           fill = Maintenance_Status)) +\n  \n  # Half-eye density plot (horizontal)\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA,\n               alpha = 0.6) +\n  \n  # Boxplot (horizontal)\n  geom_boxplot(width = 0.2, \n               outlier.shape = NA,\n               alpha = 0.8) +\n  \n  # Dot plot (horizontal)\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = NA,  \n            overflow = \"compress\",\n            dotsize = 0.6) +  \n  \n  # Flip coordinates to make it horizontal\n  coord_flip() +\n  \n  # Titles and theme\n  labs(title = \"Profitability Distribution Across Ship Types\",\n       x = \"Ship Type\", \n       y = \"Profit per Voyage (USD)\",\n       fill = \"Maintenance Status\") +\n  \n  theme_minimal()  # Clean visualization"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-analysis-across-different-variables",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#profitability-analysis-across-different-variables",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Profitability Analysis Across Different Variables",
    "text": "Profitability Analysis Across Different Variables\n\n1. Weather Condition and Route Type\nTurnaround time increases with worsening weather conditions (Calm → Moderate → Rough). Long-haul routes experience the longest delays in rough weather, which may impact profitability. Coastal and Transoceanic routes have similar turnaround times across all weather conditions. Conclusion: Weather conditions impact efficiency, and rough conditions can reduce profitability due to increased delays.\n\n\n2. Distance Traveled, Cargo Weight, and Route Type\nNo clear trend showing a direct relationship between distance traveled and turnaround time. Larger cargo weight does not necessarily lead to longer turnaround times. Conclusion: Efficient scheduling and loading processes likely help mitigate the impact of travel distance and cargo weight on turnaround time.\n\n\n3. Ship Type and Efficiency Efficiency (nm/kWh) varies significantly across ship types and route types.\nTransoceanic routes show the greatest variation in efficiency, with some ship types performing much better than others. Conclusion: The choice of ship type plays a crucial role in energy efficiency and, consequently, profitability.\n\n\n4. Profitability Distribution Across Ship Types Different ship types show varying profitability distributions, with some ship types being more profitable on average.\nMaintenance status plays a role in profitability, with “Good” maintenance status correlating with higher profit levels. Conclusion: Preventive maintenance and proper upkeep can significantly enhance profitability across different ship types.\nRoute Type & Weather: Routes affected by rough weather have longer turnaround times, impacting operational costs. Distance & Cargo Weight: Distance traveled and cargo weight do not significantly impact turnaround time, indicating efficient operations. Ship Type & Efficiency: Certain ship types are significantly more efficient, and using the most efficient ships on specific routes can increase profitability. Maintenance & Profitability: Well-maintained ships consistently yield higher profitability, emphasizing the importance of scheduled maintenance. Overall, optimizing ship maintenance, selecting the right ship type for each route, and managing turnaround times in challenging weather conditions can improve profitability."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#correlation-analysis-with-revenue-per-voyage-usd",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#correlation-analysis-with-revenue-per-voyage-usd",
    "title": "Take-home Exercise 1: Ship Performance in the Gulf of Guinea",
    "section": "Correlation Analysis with Revenue per Voyage (USD)",
    "text": "Correlation Analysis with Revenue per Voyage (USD)\n\n\n Revenue_per_Voyage_USD                  Profit    Distance_Traveled_nm \n           1.0000000000            0.8850856007            0.0403881964 \n   Operational_Cost_USD   Seasonal_Impact_Score   Efficiency_nm_per_kWh \n           0.0238650712            0.0195103556            0.0166691945 \n      Cargo_Weight_tons     Weekly_Voyage_Count Average_Load_Percentage \n           0.0165557783            0.0108415267            0.0087239239 \nSpeed_Over_Ground_knots            Draft_meters         Engine_Power_kW \n           0.0023695893            0.0006344936           -0.0109468920 \n  Turnaround_Time_hours \n          -0.0268385303 \n\n\nThe correlation matrix above shows how different numerical variables relate to Revenue per Voyage (USD). Correlation values range from -1 to 1:\n1 → Perfect positive correlation 0 → No correlation -1 → Perfect negative correlation\nFrom the Correlation Matrix, we can observe that none of the numerical variables have strong linear relationships with revenue.\n\n\nClick here to show the R code\n# Select only numerical columns for correlation\nnum_data &lt;- df[, sapply(df, is.numeric)]\n\n# Compute correlation matrix\ncor_matrix &lt;- cor(num_data, use = \"complete.obs\")\n\n# Display correlation with Revenue_per_Voyage_USD\ncor_with_revenue &lt;- cor_matrix[, \"Revenue_per_Voyage_USD\"]\n\n# Sort by highest correlation\nsorted_cor &lt;- sort(cor_with_revenue, decreasing = TRUE)\nprint(sorted_cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "pacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-correlation-matrix-using-corrplot-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualising-correlation-matrix-using-corrplot-package",
    "title": "Hands-on Exercise 5",
    "section": "Visualising Correlation Matrix using corrplot Package",
    "text": "Visualising Correlation Matrix using corrplot Package\n\nGetting started with corrplot\n\nwine.cor &lt;- cor(wine[, 1:11])\n\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\n\nWorking with visual geometrics\n\ncorrplot(wine.cor, \n         method = \"ellipse\")\n\n\n\n\n\n\n\n\n\n\nWorking with layout\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nWorking with mixed layout\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nCombining corrgram with the significant test\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\nReorder a corrgram\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nReordering a correlation matrix using hclust\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5",
    "section": "Installing and launching R packages",
    "text": "Installing and launching R packages\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-the-dataset-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-the-dataset-1",
    "title": "Hands-on Exercise 5",
    "section": "Importing the Dataset",
    "text": "Importing the Dataset\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")\n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nPreparing the Data\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-ternary-diagram-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-ternary-diagram-with-r",
    "title": "Hands-on Exercise 5",
    "section": "Plotting Ternary Diagram with R",
    "text": "Plotting Ternary Diagram with R\n\nPlotting a static ternary diagram\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\nPlotting an interative ternary diagram\n\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# Define reusable axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, \n    tickformat = \".0%\", \n    tickfont = list(size = 12)  # Increased readability\n  )\n}\n\n# Define ternary axes\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young Population\"), \n  baxis = axis(\"Active Population\"), \n  caxis = axis(\"Old Population\")\n)\n\n# Check if dataset has required columns\nif (!all(c(\"YOUNG\", \"ACTIVE\", \"OLD\") %in% colnames(agpop_mutated))) {\n  stop(\"Error: The dataset must contain 'YOUNG', 'ACTIVE', and 'OLD' columns.\")\n}\n\n# Create ternary scatter plot\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\",\n  mode = \"markers\"  # Explicitly set mode to remove warning\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes,\n    title = \"Age Group Distribution in Population\"\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-1",
    "title": "Hands-on Exercise 5",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\nImporting and Preparing The Data Set\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nPreparing the data\n\nrow.names(wh) &lt;- wh$Country\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n\n\nTransforming the data frame into a matrix\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#static-heatmap",
    "title": "Hands-on Exercise 5",
    "section": "Static Heatmap",
    "text": "Static Heatmap\n\nheatmap() of R Stats\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\n\n\nCreating Interactive Heatmap\n\nWorking with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\n\nData trasformation\n\nScaling method\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nNormalising method\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nPercentising method\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\nClustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method: default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method: default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\nIn general, a clustering model can be calibrated either manually or statistically.\n\n\nManual approach\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\n\nStatistical approach\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\nSeriation\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\nRegistered S3 method overwritten by 'gclus':\n  method         from     \n  reorder.hclust seriation\n\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nWorking with colour palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nThe finishing touch\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-2",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-2",
    "title": "Hands-on Exercise 5",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\nData Preparation\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-parallel-coordinates-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-static-parallel-coordinates-plot",
    "title": "Hands-on Exercise 5",
    "section": "Plotting Static Parallel Coordinates Plot",
    "text": "Plotting Static Parallel Coordinates Plot\n\nPlotting a simple parallel coordinates\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\n\nPlotting a parallel coordinates with boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\nWarning: The following aesthetics were dropped during statistical transformation:\ncolour.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\n\n\nParallel coordinates with facet\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\n\n\nRotating x-axis text label\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\nAdjusting the rotated x-axis text label\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))\n\n\n\n\n\n\n\n\n\n\nPlotting Interactive Parallel Coordinates Plot: parallelPlot methods\n\nThe basic plot\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\nRotate axis label\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nChanging the colour scheme\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nParallel coordinates plot with histogram\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-3",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages-3",
    "title": "Hands-on Exercise 5",
    "section": "Installing and Launching R Packages",
    "text": "Installing and Launching R Packages\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\nData Wrangling\n\nImporting the data set\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\nRows: 23205 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): Project Name, Address, Type of Area, Nett Price($), Sale Date, Pro...\ndbl  (8): No. of Units, Area (sqm), Transacted Price ($), Unit Price ($ psm)...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nGrouped summaries without the Pipe\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument.\n\n\n\n\nGrouped summaries with the pipe\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-treemap-with-treemap-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-treemap-with-treemap-package",
    "title": "Hands-on Exercise 5",
    "section": "Designing Treemap with treemap Package",
    "text": "Designing Treemap with treemap Package\n\nDesigning a static treemap\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\n\nUsing the basic arguments\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nWorking with vColor and type arguments\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThe “value” type treemap\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nThe “manual” type treemap\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative To overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nWorking with algorithm argument\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nUsing sortID\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-treemap-using-treemapify-package",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-treemap-using-treemapify-package",
    "title": "Hands-on Exercise 5",
    "section": "Designing Treemap using treemapify Package",
    "text": "Designing Treemap using treemapify Package\n\nDesigning a basic treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\nDefining hierarchy\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by planning area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-interactive-treemap-using-d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-interactive-treemap-using-d3treer",
    "title": "Hands-on Exercise 5",
    "section": "Designing Interactive Treemap using d3treeR",
    "text": "Designing Interactive Treemap using d3treeR\n\nInstalling d3treeR package\n\n#install.packages(\"devtools\")\n\n\nlibrary(devtools)\n\nLoading required package: usethis\n\n#install_github(\"timelyportfolio/d3treeR\")\n\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#designing-an-interactive-treemap",
    "title": "Hands-on Exercise 5",
    "section": "Designing An Interactive Treemap",
    "text": "Designing An Interactive Treemap\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart\n\n\n\n\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)\n\n\n\n\n\n\nImporting the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\nRows: 199999 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): source_country, tz\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExamining the data structure\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nData Preparation:\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nDeriving the attacks tibble dataframe\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\n\n\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"sans\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\n\n\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"sans\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\nStep 1: Import data\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\nStep 2: Deriving month and year fields\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\nStep 3: Extracting the target country\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\nStep 4: Computing year average arrivals by month\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\nStep 5: Plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"sans\")\n\n\n\n\n\n\n\n\n\n\n\nStep 1: Data Import\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\nRows: 550 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Country\ndbl (3): Year, Yield, Production\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nStep 2: Plotting the slopegraph\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Justin Lim\")\n\n\nConverting 'Year' to an ordered factor"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#learning-outcome",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#getting-started",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Importing the data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\nRows: 199999 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): source_country, tz\ndttm (1): timestamp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nExamining the data structure\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nData Preparation:\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nDeriving the attacks tibble dataframe\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "grouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"sans\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "attacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "ggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"sans\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Step 1: Import data\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\nStep 2: Deriving month and year fields\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\nStep 3: Extracting the target country\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\nStep 4: Computing year average arrivals by month\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\nStep 5: Plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"sans\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex07/Hands-on_Ex07.html#plotting-slopegraph",
    "title": "Hands-on Exercise 7",
    "section": "",
    "text": "Step 1: Data Import\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\nRows: 550 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Country\ndbl (3): Year, Yield, Production\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nStep 2: Plotting the slopegraph\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Justin Lim\")\n\n\nConverting 'Year' to an ordered factor"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07.html",
    "href": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07.html",
    "title": "In-Class Exercise 07",
    "section": "",
    "text": "pacman::p_load(tidyverse, tsibble, feasts, fable, seasonal, fabletools)\n\n\nts_data &lt;- read_csv(\n  \"data/visitor_arrivals_by_air.csv\")\n\nRows: 144 Columns: 34\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Month-Year\ndbl (33): Republic of South Africa, Canada, USA, Bangladesh, Brunei, China, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nts_data$`Month-Year` &lt;- dmy(\n  ts_data$`Month-Year`)\n\n\nts_data\n\n# A tibble: 144 × 34\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   &lt;date&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 27 more variables: `Hong Kong SAR (China)` &lt;dbl&gt;, India &lt;dbl&gt;,\n#   Indonesia &lt;dbl&gt;, Japan &lt;dbl&gt;, `South Korea` &lt;dbl&gt;, Kuwait &lt;dbl&gt;,\n#   Malaysia &lt;dbl&gt;, Myanmar &lt;dbl&gt;, Pakistan &lt;dbl&gt;, Philippines &lt;dbl&gt;,\n#   `Saudi Arabia` &lt;dbl&gt;, `Sri Lanka` &lt;dbl&gt;, Taiwan &lt;dbl&gt;, Thailand &lt;dbl&gt;,\n#   `United Arab Emirates` &lt;dbl&gt;, Vietnam &lt;dbl&gt;, `Belgium & Luxembourg` &lt;dbl&gt;,\n#   Finland &lt;dbl&gt;, France &lt;dbl&gt;, Germany &lt;dbl&gt;, Italy &lt;dbl&gt;, …\n\n\n\nts_data_ts &lt;- ts(ts_data)       \nhead(ts_data_ts)\n\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n\n\n\nts_tsibble &lt;- ts_data %&gt;%\n  mutate(Month = yearmonth(`Month-Year`)) %&gt;%\n  as_tsibble(index = `Month`)\n\n\nts_tsibble\n\n# A tsibble: 144 x 35 [1M]\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   &lt;date&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 28 more variables: `Hong Kong SAR (China)` &lt;dbl&gt;, India &lt;dbl&gt;,\n#   Indonesia &lt;dbl&gt;, Japan &lt;dbl&gt;, `South Korea` &lt;dbl&gt;, Kuwait &lt;dbl&gt;,\n#   Malaysia &lt;dbl&gt;, Myanmar &lt;dbl&gt;, Pakistan &lt;dbl&gt;, Philippines &lt;dbl&gt;,\n#   `Saudi Arabia` &lt;dbl&gt;, `Sri Lanka` &lt;dbl&gt;, Taiwan &lt;dbl&gt;, Thailand &lt;dbl&gt;,\n#   `United Arab Emirates` &lt;dbl&gt;, Vietnam &lt;dbl&gt;, `Belgium & Luxembourg` &lt;dbl&gt;,\n#   Finland &lt;dbl&gt;, France &lt;dbl&gt;, Germany &lt;dbl&gt;, Italy &lt;dbl&gt;, …\n\n\n\nts_longer &lt;- ts_data %&gt;%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n\n\nts_longer %&gt;%\n  filter(Country == \"Vietnam\") %&gt;%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(linewidth = 0.5)\n\n\n\n\n\n\n\n\n\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals,\n           color = Country))+\n  geom_line(size = 0.5) +\n  theme(legend.position = \"bottom\", \n        legend.box.spacing = unit(0.5, \"cm\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals))+\n  geom_line(size = 0.5) +\n  facet_wrap(~ Country,\n             ncol = 3,\n             scales = \"free_y\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\ntsibble_longer &lt;- ts_tsibble %&gt;%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Italy\" |\n         Country == \"Vietnam\" |\n         Country == \"United Kingdom\" |\n         Country == \"Germany\") %&gt;% \n  gg_season(Arrivals)\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %&gt;% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %&gt;% \n  gg_subseries(Arrivals)\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  ACF(Arrivals) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  PACF(Arrivals) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %&gt;%\n  ACF(Arrivals) %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %&gt;%\n  PACF(Arrivals) %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  gg_tsdisplay(Arrivals)\n\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  model(stl = STL(Arrivals)) %&gt;%\n  components() %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  model(\n    classical_decomposition(\n      Arrivals, type = \"additive\")) %&gt;%\n  components() %&gt;%\n  autoplot()\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nvietnam_ts &lt;- tsibble_longer %&gt;%\n  filter(Country == \"Vietnam\") %&gt;% \n  mutate(Type = if_else(\n    `Month-Year` &gt;= \"2019-01-01\", \n    \"Hold-out\", \"Training\"))\n\n\nvietnam_train &lt;- vietnam_ts %&gt;%\n  filter(`Month-Year` &lt; \"2019-01-01\")\n\n\n\n\n\nvietnam_train %&gt;%\n  model(stl = STL(Arrivals)) %&gt;%\n  components() %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\nvietnam_H &lt;- vietnam_train %&gt;%\n  model(`Holt Method` = \n          ETS(Arrivals ~ error(\"A\") + trend(\"A\") + season(\"N\"))\n  )\nreport(vietnam_H)\n\nSeries: Arrivals \nModel: ETS(A,A,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n    beta  = 0.0001004625 \n\n  Initial states:\n     l[0]     b[0]\n 13673.29 525.8859\n\n  sigma^2:  28584805\n\n     AIC     AICc      BIC \n2916.695 2917.171 2931.109 \n\n\n\n\n\n\nvietnam_HAd &lt;- vietnam_train %&gt;%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")))\nvietnam_HAd %&gt;% report()\n\nSeries: Arrivals \nModel: ETS(A,Ad,N) \n  Smoothing parameters:\n    alpha = 0.9998999 \n    beta  = 0.0001098602 \n    phi   = 0.9784562 \n\n  Initial states:\n     l[0]   b[0]\n 13257.28 523.54\n\n  sigma^2:  28641536\n\n     AIC     AICc      BIC \n2917.921 2918.593 2935.218"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07.html#getting-started",
    "href": "In-Class_Ex/In-Class_Ex07/In-Class_Ex07.html#getting-started",
    "title": "In-Class Exercise 07",
    "section": "",
    "text": "pacman::p_load(tidyverse, tsibble, feasts, fable, seasonal, fabletools)\n\n\nts_data &lt;- read_csv(\n  \"data/visitor_arrivals_by_air.csv\")\n\nRows: 144 Columns: 34\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Month-Year\ndbl (33): Republic of South Africa, Canada, USA, Bangladesh, Brunei, China, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nts_data$`Month-Year` &lt;- dmy(\n  ts_data$`Month-Year`)\n\n\nts_data\n\n# A tibble: 144 × 34\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   &lt;date&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 27 more variables: `Hong Kong SAR (China)` &lt;dbl&gt;, India &lt;dbl&gt;,\n#   Indonesia &lt;dbl&gt;, Japan &lt;dbl&gt;, `South Korea` &lt;dbl&gt;, Kuwait &lt;dbl&gt;,\n#   Malaysia &lt;dbl&gt;, Myanmar &lt;dbl&gt;, Pakistan &lt;dbl&gt;, Philippines &lt;dbl&gt;,\n#   `Saudi Arabia` &lt;dbl&gt;, `Sri Lanka` &lt;dbl&gt;, Taiwan &lt;dbl&gt;, Thailand &lt;dbl&gt;,\n#   `United Arab Emirates` &lt;dbl&gt;, Vietnam &lt;dbl&gt;, `Belgium & Luxembourg` &lt;dbl&gt;,\n#   Finland &lt;dbl&gt;, France &lt;dbl&gt;, Germany &lt;dbl&gt;, Italy &lt;dbl&gt;, …\n\n\n\nts_data_ts &lt;- ts(ts_data)       \nhead(ts_data_ts)\n\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n\n\n\nts_tsibble &lt;- ts_data %&gt;%\n  mutate(Month = yearmonth(`Month-Year`)) %&gt;%\n  as_tsibble(index = `Month`)\n\n\nts_tsibble\n\n# A tsibble: 144 x 35 [1M]\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   &lt;date&gt;                            &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 28 more variables: `Hong Kong SAR (China)` &lt;dbl&gt;, India &lt;dbl&gt;,\n#   Indonesia &lt;dbl&gt;, Japan &lt;dbl&gt;, `South Korea` &lt;dbl&gt;, Kuwait &lt;dbl&gt;,\n#   Malaysia &lt;dbl&gt;, Myanmar &lt;dbl&gt;, Pakistan &lt;dbl&gt;, Philippines &lt;dbl&gt;,\n#   `Saudi Arabia` &lt;dbl&gt;, `Sri Lanka` &lt;dbl&gt;, Taiwan &lt;dbl&gt;, Thailand &lt;dbl&gt;,\n#   `United Arab Emirates` &lt;dbl&gt;, Vietnam &lt;dbl&gt;, `Belgium & Luxembourg` &lt;dbl&gt;,\n#   Finland &lt;dbl&gt;, France &lt;dbl&gt;, Germany &lt;dbl&gt;, Italy &lt;dbl&gt;, …\n\n\n\nts_longer &lt;- ts_data %&gt;%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n\n\nts_longer %&gt;%\n  filter(Country == \"Vietnam\") %&gt;%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(linewidth = 0.5)\n\n\n\n\n\n\n\n\n\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals,\n           color = Country))+\n  geom_line(size = 0.5) +\n  theme(legend.position = \"bottom\", \n        legend.box.spacing = unit(0.5, \"cm\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals))+\n  geom_line(size = 0.5) +\n  facet_wrap(~ Country,\n             ncol = 3,\n             scales = \"free_y\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\ntsibble_longer &lt;- ts_tsibble %&gt;%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Italy\" |\n         Country == \"Vietnam\" |\n         Country == \"United Kingdom\" |\n         Country == \"Germany\") %&gt;% \n  gg_season(Arrivals)\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %&gt;% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %&gt;% \n  gg_subseries(Arrivals)\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  ACF(Arrivals) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  PACF(Arrivals) %&gt;% \n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %&gt;%\n  ACF(Arrivals) %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %&gt;%\n  PACF(Arrivals) %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  gg_tsdisplay(Arrivals)\n\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  model(stl = STL(Arrivals)) %&gt;%\n  components() %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\n\ntsibble_longer %&gt;%\n  filter(`Country` == \"Vietnam\") %&gt;%\n  model(\n    classical_decomposition(\n      Arrivals, type = \"additive\")) %&gt;%\n  components() %&gt;%\n  autoplot()\n\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\nvietnam_ts &lt;- tsibble_longer %&gt;%\n  filter(Country == \"Vietnam\") %&gt;% \n  mutate(Type = if_else(\n    `Month-Year` &gt;= \"2019-01-01\", \n    \"Hold-out\", \"Training\"))\n\n\nvietnam_train &lt;- vietnam_ts %&gt;%\n  filter(`Month-Year` &lt; \"2019-01-01\")\n\n\n\n\n\nvietnam_train %&gt;%\n  model(stl = STL(Arrivals)) %&gt;%\n  components() %&gt;%\n  autoplot()\n\n\n\n\n\n\n\n\n\n\n\nvietnam_H &lt;- vietnam_train %&gt;%\n  model(`Holt Method` = \n          ETS(Arrivals ~ error(\"A\") + trend(\"A\") + season(\"N\"))\n  )\nreport(vietnam_H)\n\nSeries: Arrivals \nModel: ETS(A,A,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n    beta  = 0.0001004625 \n\n  Initial states:\n     l[0]     b[0]\n 13673.29 525.8859\n\n  sigma^2:  28584805\n\n     AIC     AICc      BIC \n2916.695 2917.171 2931.109 \n\n\n\n\n\n\nvietnam_HAd &lt;- vietnam_train %&gt;%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")))\nvietnam_HAd %&gt;% report()\n\nSeries: Arrivals \nModel: ETS(A,Ad,N) \n  Smoothing parameters:\n    alpha = 0.9998999 \n    beta  = 0.0001098602 \n    phi   = 0.9784562 \n\n  Initial states:\n     l[0]   b[0]\n 13257.28 523.54\n\n  sigma^2:  28641536\n\n     AIC     AICc      BIC \n2917.921 2918.593 2935.218"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "",
    "text": "Select three data visualization from Singstat. Comment on the pros and cons and provide sketches of the make-over.\nUse appropriate ggplot2 and other packages to create the make-over of the three data visualization critic in part 1.\nAnalyse the data with time-series analysis or time-series forecasting methods with appropriate data visualization methods and R packages."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros",
    "title": "Take-home Exercise 2",
    "section": "Pros",
    "text": "Pros\n\nEasy to identify the trading partners that has the highest total trades.\nEasy to identify if a trading partner has more Exports or Imports."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons",
    "title": "Take-home Exercise 2",
    "section": "Cons",
    "text": "Cons\n\nHard to tell how much import and export does a trading partner has.\nLimited information about the types of merchandises.\nThe charts are not interactive.\nCan introduce time series analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros-1",
    "title": "Take-home Exercise 2",
    "section": "Pros",
    "text": "Pros\n\nNeat bar chart which allows differentiation between the total number of Exports and Imports with percentages and amount ($) shown.\nThe sections are broken down into categories."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons-1",
    "title": "Take-home Exercise 2",
    "section": "Cons",
    "text": "Cons\n\nThe bar chart has many sections and unable to understand what it is trying to show.\nVery brief information about the non-oil merchandise trade.\nNo time series which will allow users to identify trends.\nThe charts are not interactive."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros-2",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#pros-2",
    "title": "Take-home Exercise 2",
    "section": "Pros",
    "text": "Pros\n\nEasy to visualise"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons-2",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#cons-2",
    "title": "Take-home Exercise 2",
    "section": "Cons",
    "text": "Cons\n\nWhy is 2024 data not available.\nWhy compare with 2019, is it 5 years\nGrouping partners into groups creates unfair comparison.\nCan show the types of import and exports\n\n\nAdditional Work\n\nTo study the data and see if able to uncover more information.\nTo see if able to use other ways to visualise the data and to provide more insights."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#merchandise-trade-performance-with-major-trading-partners-2024",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#merchandise-trade-performance-with-major-trading-partners-2024",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "1. Merchandise Trade Performance with Major Trading Partners, 2024",
    "text": "1. Merchandise Trade Performance with Major Trading Partners, 2024\n\n\n\n\n\n\n\n\n\nThis chart shows the merchandise trade performance with major partners in 2024. The bubbles reflects Singapore’s total merchandise trade value with the trading partner. The line between the green region and blue region in the chart represents the Trade Balance Line. The closer the white circle is to the line, the more balance the trade.\nThe trade balance—the difference between a country’s exports and imports—is a key indicator of economic health and plays a crucial role in shaping economic policy. It not only is an indicator of economic health, it also impacts other areas such as currency value, employment, global trade relations, and many more.\n\nPros\n\nEasy to identify the trading partners that has the highest total trades.\nEasy to identify if a trading partner has more Exports or Imports.\n\n\n\nCons\n\nHard to tell the exact import and export trade each trading partner has.\nLimited information about the months breakdown.\nThe charts are not interactive."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#non-oil-merchandise-trade-by-major-commodity-sections-2024",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#non-oil-merchandise-trade-by-major-commodity-sections-2024",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "2. Non-Oil Merchandise Trade By Major Commodity Sections, 2024",
    "text": "2. Non-Oil Merchandise Trade By Major Commodity Sections, 2024\n\n\n\n\n\n\n\n\n\nThis chart shows the breakdown of non-oil merchandise trade by major commodity sections in 2024. It gives insights on the major commodity sections. Machinery & Transport Equipment is the highest followed by Chemicals & Chemical Products.\n\nPros\n\nNeat bar chart which allows shows the total number of Exports and Imports with percentages and amount shown.\nThe sections are broken down into relevant categories.\n\n\n\nCons\n\nThe Machinery and Transport Equipment bar chart has many sections and unable to understand what it is trying to show.\nVery brief information about the non-oil merchandise trade.\nNo time series which will allow users to identify trends.\nThe charts are not interactive."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#major-trading-partners-for-trade-in-services-2023",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#major-trading-partners-for-trade-in-services-2023",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "3. Major Trading Partners For Trade in Services, 2023",
    "text": "3. Major Trading Partners For Trade in Services, 2023\n\n\n\n\n\n\n\n\n\n\nPros\n\nEasy to visualize\nGood comparison by using 2 years\nComparison between top partners\n\n\n\nCons\n\nCould use more years data for comparison\nGrouping partners into groups creates unfair comparison.\nChart is not interactive"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#getting-started",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and loading required libraries\nLoad pacman::p_load\npacman::p_load(readxl, readr, ggplot2, tidyverse, dplyr, plotly, scales, lubridate, feasts, viridis, stringr, tsibble, fable, seasonal, fabletools, patchwork)\n\n\nImporting the data\nLoad the dataset: 1. Trade in services dataset Singstat Trade in Services 2. Merchandise trade by Country dataset Singstat Merchandise Trade 3. Merchandise trade dataset Singstat Merchandise Trade\n\n\nClick here to show the R code\n# Define file paths\n# Load datasets\ntis_import_data &lt;- read_csv(\"data/tis_import.csv\")\ntis_export_data &lt;- read_csv(\"data/tis_export.csv\")\nmtcexport_data &lt;- read_csv(\"data/MTC_Ex.csv\")\nmtcimport_data &lt;- read_csv(\"data/MTC_Import.csv\")\nmtexport_data &lt;- read_csv(\"data/Merchandise_Trade_Export.csv\")\nmtimport_data &lt;- read_csv(\"data/Merchandise_Trade_Import.csv\")\n# Read Import & Export Data\nimport_data5 &lt;- read_csv(\"data/Merchandise_Trade_Import.csv\", show_col_types = FALSE)\nexport_data5 &lt;- read_csv(\"data/Merchandise_Trade_Export.csv\", show_col_types = FALSE)\n\n\n\n\nRows: 91 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (9): Data Series, 2016, 2006, 2005, 2004, 2003, 2002, 2001, 2000\nnum (16): 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2015, 2014, 2013, 2012, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 90 Columns: 25\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (8): Data Series, 2009, 2005, 2004, 2003, 2002, 2001, 2000\nnum (17): 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2014, 2013, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 175 Columns: 276\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Data Series\ndbl (143): 2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2025 ...\nlgl (132): ...145, ...146, ...147, ...148, ...149, ...150, ...151, ...152, ....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 171 Columns: 276\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Data Series\nnum (143): 2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2025 ...\nlgl (132): ...145, ...146, ...147, ...148, ...149, ...150, ...151, ...152, ....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 9 Columns: 744\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Data Series\ndbl (143): 2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2025 ...\nlgl (600): ...145, ...146, ...147, ...148, ...149, ...150, ...151, ...152, ....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nRows: 9 Columns: 744\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): Data Series\ndbl (143): 2024, 2023, 2022, 2021, 2020, 2019, 2018, 2017, 2016, 2015, 2025 ...\nlgl (600): ...145, ...146, ...147, ...148, ...149, ...150, ...151, ...152, ....\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nNew names:\nNew names:\n\n\n\n\nData Processing\nThe dataset has been cleaned in excel and saved as csv. Irrelevant values were removed to reduce file size. Recent decade data were used in this analysis."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#merchandise-trade-performance-with-major-trading-partners-2024-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#merchandise-trade-performance-with-major-trading-partners-2024-1",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "1. Merchandise Trade Performance with Major Trading Partners, 2024",
    "text": "1. Merchandise Trade Performance with Major Trading Partners, 2024\nSteps: Export and Import data were merged. Values were converted to numeric. Top 20 total trade countries were selected. Add in filter to allow user to select countries. Create animated bubble plot. Display the animated bubble plot.\n\n\nClick here to show the R code\n# Keep only necessary columns (Remove unnamed columns)\nexport_data &lt;- mtcexport_data[, 1:11]\nimport_data &lt;- mtcimport_data[, 1:11]\n\n# Convert from wide to long format (Fix column reference error)\nexport_long2 &lt;- export_data %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Export Value\") %&gt;%\n  mutate(Year = as.numeric(Year))\n\nimport_long2 &lt;- import_data %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Import Value\") %&gt;%\n  mutate(Year = as.numeric(Year))\n\n# Merge export and import data\ntrade_data2 &lt;- merge(export_long2, import_long2, by = c(\"Data Series\", \"Year\"))\n\n# Convert values to numeric (handle commas safely)\ntrade_data2 &lt;- trade_data2 %&gt;%\n  mutate(\n    `Export Value` = as.numeric(gsub(\",\", \"\", `Export Value`)),\n    `Import Value` = as.numeric(gsub(\",\", \"\", `Import Value`)),\n    Total_Trade = `Export Value` + `Import Value`\n  )\n\n# Select Top 20 Countries based on total trade in 2024\ntop_countries2 &lt;- trade_data2 %&gt;%\n  filter(Year == 2024 & !is.na(Total_Trade) & Total_Trade &gt; 0) %&gt;%\n  arrange(desc(Total_Trade)) %&gt;%\n  head(20) %&gt;%\n  pull(`Data Series`)\n\n# Allow users to select additional countries\nselected_countries2 &lt;- top_countries2  # Default selection is Top 20\n\n# Filter dataset to include top 20 + selected countries\ntrade_data_filtered2 &lt;- trade_data2 %&gt;%\n  filter(`Data Series` %in% selected_countries2)\n\n# Convert Year to factor for animation\ntrade_data_filtered2$Year &lt;- as.factor(trade_data_filtered2$Year)\n\n# Create Animated Bubble Plot\ngg &lt;- ggplot(trade_data_filtered2, \n       aes(x = `Export Value`, \n           y = `Import Value`, \n           size = Total_Trade, \n           colour = `Data Series`)) +\n  geom_point(aes(frame = Year), \n             alpha = 0.7, \n             show.legend = TRUE) +  # Keep legend for comparison\n  scale_size(range = c(3, 15)) +  # Adjust bubble size\n  labs(\n    title = \"Trade Comparison Over Time\",\n    x = \"Exports (S$ Billion)\",\n    y = \"Imports (S$ Billion)\",\n    color = \"Country\"\n  ) +\n  theme_minimal()\n\n# Convert to interactive Plotly animation\nbubble_plotly &lt;- ggplotly(gg) %&gt;%\n  animation_opts(frame = 1000, easing = \"linear\", redraw = TRUE)\n\n# Display the interactive plot\nbubble_plotly\n\n\n\n\nWarning in geom_point(aes(frame = Year), alpha = 0.7, show.legend = TRUE):\nIgnoring unknown aesthetics: frame\n\n\n\n\n\n\nThe Merchandise Trade Performance with Major Trading Partners, 2024 chart is made into an animated bubble plot. This bubble plot shows the trend of the top 20 total trade countries. User can click play and watch the trade movements of each country. User can select if they want to include or exclude a country for easy visualization."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#non-oil-merchandise-trade-by-major-commodity-sections-2024-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#non-oil-merchandise-trade-by-major-commodity-sections-2024-1",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "2. Non-Oil Merchandise Trade By Major Commodity Sections, 2024",
    "text": "2. Non-Oil Merchandise Trade By Major Commodity Sections, 2024\nSteps: Create a drop down list in the chart. Add years to the drop down list. Create import chart Create export chart Display the bar chart.\n\n\nClick here to show the R code\n# Keep only necessary columns (2015-2024)\nexport_data1 &lt;- mtexport_data[, 1:11]\nimport_data1 &lt;- mtimport_data[, 1:11]\n\n# Convert from wide to long format\nexport_long &lt;- export_data1 %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Export Value\") %&gt;%\n  mutate(Year = as.numeric(Year))\n\nimport_long &lt;- import_data1 %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Import Value\") %&gt;%\n  mutate(Year = as.numeric(Year))\n\n# Unique years in dataset\nyears &lt;- unique(export_long$Year)\n\n# Create a dropdown list including \"All\"\ndropdown_buttons &lt;- list(\n  list(\n    label = \"All\",\n    method = \"update\",\n    args = list(list(visible = rep(TRUE, length(years) * 2)))  # Twice the years (Exports & Imports)\n  )\n)\n\n# Add individual years to dropdown\nfor (year in years) {\n  dropdown_buttons &lt;- append(dropdown_buttons, list(\n    list(\n      label = as.character(year),\n      method = \"update\",\n      args = list(list(visible = c(export_long$Year == year, import_long$Year == year)))\n    )\n  ))\n}\n\n# Export Chart with Dropdown Selection\nexport_plot &lt;- ggplot(export_long, aes(x = `Data Series`, y = `Export Value`, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Commodity\", y = \"Export Value (S$ Billion)\", fill = \"Year\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nexport_plotly &lt;- ggplotly(export_plot) %&gt;%\n  layout(showlegend = TRUE)\n\n# Import Chart with Dropdown Selection\nimport_plot &lt;- ggplot(import_long, aes(x = `Data Series`, y = `Import Value`, fill = as.factor(Year))) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Commodity\", y = \"Import Value (S$ Billion)\", fill = \"Year\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nimport_plotly &lt;- ggplotly(import_plot) %&gt;%\n  layout(showlegend = TRUE)\n\n# Combine both charts in one figure with separate titles\ncombined_plotly &lt;- subplot(\n  export_plotly, \n  import_plotly, \n  nrows = 1,  \n  shareX = TRUE, \n  shareY = FALSE\n) %&gt;%\n  layout(\n    updatemenus = list(\n      list(\n        buttons = dropdown_buttons,\n        direction = \"down\",\n        x = 1.2, y = 1.2,\n        xanchor = \"right\",\n        yanchor = \"top\"\n      )\n    ),\n    annotations = list(\n      list(\n        text = \"&lt;b&gt;Export&lt;/b&gt;\", \n        x = 0.25, y = 1.05, \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 16)\n      ),\n      list(\n        text = \"&lt;b&gt;Import&lt;/b&gt;\", \n        x = 0.75, y = 1.05, \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 16)\n      )\n    )\n  )\n\n# Display the combined interactive chart\ncombined_plotly\n\n\n\n\n\n\n\n\nThis import and export bar chart is a makeover of the Non-Oil Merchandise Trade By Major Commodity Sections, 2024 chart. There are a few improvements made. This bar chart allows users to easily visualize changes across the years. Users are able to select years for comparison by clicking on the years in the legend. Users can view individual years from the drop down list or reset the chart by selecting “All”. The tooltip provides information on the import/export values"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#major-trading-partners-for-trade-in-services-2023-1",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#major-trading-partners-for-trade-in-services-2023-1",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "3. Major Trading Partners For Trade in Services, 2023",
    "text": "3. Major Trading Partners For Trade in Services, 2023\nSteps: Calculate trade balance. Select top 10 countries for total trade in services. Create import heatmap. Create export heatmap. Create trade balance heatmap. Add in interactive tooltip.\n\n\nClick here to show the R code\n# Define a common manual color scale\ncommon_colors &lt;- c(\"#440154FF\", \"#3B528BFF\", \"#21908CFF\", \"#5DC863FF\", \"#FDE725FF\") \n\n# Ensure all column names are characters before selecting\ncolnames(tis_import_data) &lt;- as.character(colnames(tis_import_data))\ncolnames(tis_export_data) &lt;- as.character(colnames(tis_export_data))\n\n# Keep only necessary columns (Data Series + last 10 years: 2013-2023)\nyears_to_keep &lt;- as.character(2023:2013)  # Ensure column names are characters\ntis_import_data &lt;- tis_import_data %&gt;% select(all_of(c(\"Data Series\", years_to_keep)))\ntis_export_data &lt;- tis_export_data %&gt;% select(all_of(c(\"Data Series\", years_to_keep)))\n\n# Convert all columns to character before pivoting\ntis_import_data &lt;- tis_import_data %&gt;% mutate(across(everything(), as.character))\ntis_export_data &lt;- tis_export_data %&gt;% mutate(across(everything(), as.character))\n\n# Convert Import Data from Wide to Long Format\nimport_long3 &lt;- tis_import_data %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Import Value\") %&gt;%\n  mutate(Year = as.numeric(Year),  \n         `Import Value` = as.numeric(gsub(\"[^0-9.]\", \"\", `Import Value`)))  # Remove non-numeric characters\n\n# Convert Export Data from Wide to Long Format\nexport_long3 &lt;- tis_export_data %&gt;%\n  pivot_longer(cols = -`Data Series`, names_to = \"Year\", values_to = \"Export Value\") %&gt;%\n  mutate(Year = as.numeric(Year),  \n         `Export Value` = as.numeric(gsub(\"[^0-9.]\", \"\", `Export Value`)))  # Remove non-numeric characters\n\n# Merge import and export data\ntrade_data3 &lt;- merge(import_long3, export_long3, by = c(\"Data Series\", \"Year\"))\n\n# Convert values to numeric and compute Trade Balance\ntrade_data3 &lt;- trade_data3 %&gt;%\n  mutate(\n    `Import Value` = as.numeric(`Import Value`),  # Ensure numeric conversion\n    `Export Value` = as.numeric(`Export Value`),  # Ensure numeric conversion\n    Trade_Balance = `Export Value` - `Import Value`,  # Trade Balance\n    Total_Trade = `Import Value` + `Export Value`\n  )\n\n# Handle potential NAs (optional)\ntrade_data3 &lt;- trade_data3 %&gt;%\n  mutate(\n    `Import Value` = replace_na(`Import Value`, 0),\n    `Export Value` = replace_na(`Export Value`, 0),\n    Trade_Balance = replace_na(Trade_Balance, 0)\n  )\n\n# Calculate percentage of total import/export for each year\ntrade_data3 &lt;- trade_data3 %&gt;%\n  group_by(Year) %&gt;%\n  mutate(\n    Import_Percent = (`Import Value` / sum(`Import Value`, na.rm = TRUE)) * 100,\n    Export_Percent = (`Export Value` / sum(`Export Value`, na.rm = TRUE)) * 100\n  ) %&gt;%\n  ungroup()\n\n# Select Top 10 Countries based on total trade in 2023\ntop_countries3 &lt;- trade_data3 %&gt;%\n  filter(Year == 2023 & !is.na(Total_Trade) & Total_Trade &gt; 0) %&gt;%\n  arrange(desc(Total_Trade)) %&gt;%\n  head(10) %&gt;%\n  pull(`Data Series`)\n\n# Filter dataset to include only top 10 countries\ntrade_data_filtered3 &lt;- trade_data3 %&gt;%\n  filter(`Data Series` %in% top_countries3)\n\n# Get min/max values for legend scaling\nmin_trade_value &lt;- min(trade_data_filtered3$`Export Value`, trade_data_filtered3$`Import Value`, trade_data_filtered3$Trade_Balance, na.rm = TRUE)\nmax_trade_value &lt;- max(trade_data_filtered3$`Export Value`, trade_data_filtered3$`Import Value`, trade_data_filtered3$Trade_Balance, na.rm = TRUE)\n\n# Create Export Heatmap\nexport_heatmap &lt;- ggplot(trade_data_filtered3, aes(\n    x = Year, y = `Data Series`, fill = `Export Value`,\n    text = paste(\n      \"Country: \", `Data Series`, \"&lt;br&gt;\",\n      \"Year: \", Year, \"&lt;br&gt;\",\n      \"Export: $\", scales::comma(`Export Value`), \"&lt;br&gt;\",\n      \"Share of Total: \", round(Export_Percent, 2), \"%\"\n    )\n)) +\n  geom_tile() +\n  scale_fill_gradientn(colors = common_colors, limits = c(min_trade_value, max_trade_value),\n                       breaks = seq(min_trade_value, max_trade_value, length.out = 5)) +  \n  scale_x_continuous(breaks = seq(min(trade_data_filtered3$Year), max(trade_data_filtered3$Year), by = 3)) +  \n  labs(title = \"Export Heatmap (2013-2023)\",\n       x = \"Year\",\n       y = \"Country\",\n       fill = \"Trade Value\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate labels\n  guides(fill = guide_colorbar())  # Ensure only one legend\n\n# Create Import Heatmap\nimport_heatmap &lt;- ggplot(trade_data_filtered3, aes(\n    x = Year, y = `Data Series`, fill = `Import Value`,\n    text = paste(\n      \"Country: \", `Data Series`, \"&lt;br&gt;\",\n      \"Year: \", Year, \"&lt;br&gt;\",\n      \"Import: $\", scales::comma(`Import Value`), \"&lt;br&gt;\",\n      \"Share of Total: \", round(Import_Percent, 2), \"%\"\n    )\n)) +\n  geom_tile() +\n  scale_fill_gradientn(colors = common_colors, limits = c(min_trade_value, max_trade_value),\n                       breaks = seq(min_trade_value, max_trade_value, length.out = 5)) +  \n  scale_x_continuous(breaks = seq(min(trade_data_filtered3$Year), max(trade_data_filtered3$Year), by = 3)) +  \n  labs(title = \"Import Heatmap (2013-2023)\",\n       x = \"Year\",\n       y = \"Country\",\n       fill = \"Trade Value\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate labels\n  guides(fill = guide_colorbar())  # Keep one legend format\n\n# Create Trade Balance Heatmap\ntrade_balance_heatmap &lt;- ggplot(trade_data_filtered3, aes(\n    x = Year, y = `Data Series`, fill = Trade_Balance,\n    text = paste(\n      \"Country: \", `Data Series`, \"&lt;br&gt;\",\n      \"Year: \", Year, \"&lt;br&gt;\",\n      \"Trade Balance: $\", scales::comma(Trade_Balance)\n    )\n)) +\n  geom_tile() +\n  scale_fill_gradientn(colors = common_colors, limits = c(min_trade_value, max_trade_value),\n                       breaks = seq(min_trade_value, max_trade_value, length.out = 5)) +  \n  scale_x_continuous(breaks = seq(min(trade_data_filtered3$Year), max(trade_data_filtered3$Year), by = 3)) +  \n  labs(title = \"Trade Balance Heatmap (2013-2023)\",\n       x = \"Year\",\n       y = \"Country\",\n       fill = \"Trade Value\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate labels\n  guides(fill = guide_colorbar())  # Ensure consistent legend\n\n# Convert all plots to interactive ggplotly\nexport_plotly &lt;- ggplotly(export_heatmap, tooltip = \"text\") %&gt;% layout(showlegend = FALSE)\nimport_plotly &lt;- ggplotly(import_heatmap, tooltip = \"text\") %&gt;% layout(showlegend = FALSE)\ntrade_balance_plotly &lt;- ggplotly(trade_balance_heatmap, tooltip = \"text\")\n\n# Arrange all three heatmaps in a single row with consistent legends\ncombined_plotly &lt;- subplot(\n  export_plotly, \n  import_plotly, \n  trade_balance_plotly, \n  nrows = 1,  \n  shareX = TRUE, \n  shareY = TRUE,\n  titleX = TRUE,\n  titleY = TRUE\n) %&gt;%\n  layout(\n    showlegend = TRUE,  \n    legend = list(orientation = \"h\", x = 0.5, y = -0.2, xanchor = \"center\")  # Position legend at bottom\n  )\n\n# Display combined interactive heatmap\ncombined_plotly\n\n\n\n\n\n\n\n\nThis 3 heat map is the make over of Major Trading Partners For Trade in Services, 2023 chart. Instead of comparing two years data, this heat map allows us to compare 10 years data. Heat map allows user to visualize the trend where the value increases with shade. The interactive tool tip shows percentage total trade and value. The trade balance heat map allows clear visualization if a country is positive or negative. We can notice that even though United States of America has increasing trade in services import and export, the trade balance is getting worse from 9,000 to 56,000 over 10 years. Trade balance with Australia on the other hand is improving from 6,000 to 31,000"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#sketches",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#sketches",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "Sketches",
    "text": "Sketches\n\n1. Sketch for Merchandise Trade Performance with Major Trading Partners, 2024\n\n\n\n\n\n\n\n\n\nScatter plot will be used to show the trend of Merchandise Trade. A slider will be added to display the amount of import/export for each country over the years. Bubble size will be according to total trade.\n\n\n2. Sketch for Non-Oil Merchandise Trade By Major Commodity Sections, 2024\n\n\n\n\n\n\n\n\n\nBar chart will be used to show the trend of the different commodities across 10 years. Chart will be interactive where users are able to select the type of commodity for comparison.\n\n\n3. Sketch for Major Trading Partners For Trade in Services, 2023\n\n\n\n\n\n\n\n\n\nTrade in services refers to the exchange of intangible economic activities between countries, such as financial services, IT services, tourism, education, consulting, and transportation. Unlike merchandise trade, which involves physical goods, trade in services revolves around expertise, skills, and knowledge. Heat map will be used to show trend of import, export and also trade balance. Tooltip will be added where user can see the values when the mouse hover over each cell."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualisation",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualisation",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "Visualisation",
    "text": "Visualisation"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#time-series-analysis-on-top-merchandise-trade-countries",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#time-series-analysis-on-top-merchandise-trade-countries",
    "title": "Take-home Exercise 2: Be Tradewise or Otherwise",
    "section": "Time-Series Analysis on Top Merchandise Trade Countries",
    "text": "Time-Series Analysis on Top Merchandise Trade Countries\nggplotly was used to find the import and export trend of the top merchandise trade countries. User can opt to add or remove countries for comparison by selecting in the legend.\n\n\nClick here to show the R code\n# Rename first column dynamically\ncolnames(mtcimport_data)[1] &lt;- \"Country\"\ncolnames(mtcexport_data)[1] &lt;- \"Country\"\n\n# Identify only numeric year columns\nvalid_years &lt;- colnames(mtcimport_data)[-1]  # Exclude \"Country\"\nvalid_years &lt;- valid_years[str_detect(valid_years, \"^[0-9]{4}$\")]  # Keep only year-like values\n\n# Convert wide format to long format\nimport_longg &lt;- mtcimport_data %&gt;%\n  select(Country, all_of(valid_years)) %&gt;%\n  pivot_longer(cols = -Country, names_to = \"Year\", values_to = \"Import_Value\") %&gt;%\n  mutate(Year = as.integer(Year),  \n         Import_Value = as.numeric(gsub(\",\", \"\", as.character(Import_Value))))  # Convert Import Value\n\nexport_longg &lt;- mtcexport_data %&gt;%\n  select(Country, all_of(valid_years)) %&gt;%\n  pivot_longer(cols = -Country, names_to = \"Year\", values_to = \"Export_Value\") %&gt;%\n  mutate(Year = as.integer(Year),\n         Export_Value = as.numeric(gsub(\",\", \"\", as.character(Export_Value))))\n\n# Remove any NA values introduced by coercion\nimport_longg &lt;- import_longg %&gt;% filter(!is.na(Year) & !is.na(Import_Value))\nexport_longg &lt;- export_longg %&gt;% filter(!is.na(Year) & !is.na(Export_Value))\n\n# Calculate total trade (Import + Export)\ntrade_summary &lt;- import_longg %&gt;%\n  inner_join(export_longg, by = c(\"Country\", \"Year\")) %&gt;%\n  mutate(Total_Trade = Import_Value + Export_Value)\n\n# Select Top 10 Countries based on total trade in 2024\ntop_trade_countries &lt;- trade_summary %&gt;%\n  filter(Year == 2024) %&gt;%\n  arrange(desc(Total_Trade)) %&gt;%\n  slice(1:10) %&gt;%\n  pull(Country)\n\n# Filter Import & Export data for top 10 total trade countries\nimport_filtered &lt;- import_longg %&gt;%\n  filter(Country %in% top_trade_countries) %&gt;%\n  mutate(Import_Value = Import_Value / 1000)  # Convert to 'thousands'\n\nexport_filtered &lt;- export_longg %&gt;%\n  filter(Country %in% top_trade_countries) %&gt;%\n  mutate(Export_Value = Export_Value / 1000)  # Convert to 'thousands'\n\n# Adjust Import Plot with better year readability\nimport_plot &lt;- ggplot(import_filtered, aes(x = Year, y = Import_Value, color = Country, \n                                           text = paste(\"Year:\", Year, \"&lt;br&gt;Import Value (K):\", Import_Value), \n                                           group = Country)) +  \n  geom_line(linewidth = 1) +  \n  labs(y = \"Import Value (in Thousands)\", x = \"Year\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma) +  \n  scale_x_continuous(\n    breaks = seq(min(import_filtered$Year), max(import_filtered$Year), 2)  # Adjust to every 2 years\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n\nimport_plotly &lt;- ggplotly(import_plot, tooltip = \"text\") %&gt;% layout(showlegend = TRUE)\n\n# Adjust Export Plot with better year readability\nexport_plot &lt;- ggplot(export_filtered, aes(x = Year, y = Export_Value, color = Country, \n                                           text = paste(\"Year:\", Year, \"&lt;br&gt;Export Value (K):\", Export_Value), \n                                           group = Country)) +  \n  geom_line(linewidth = 1) +  \n  labs(y = \"Export Value (in Thousands)\", x = \"Year\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma) +  \n  scale_x_continuous(\n    breaks = seq(min(export_filtered$Year), max(export_filtered$Year), 2)  # Adjust to every 2 years\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n\nexport_plotly &lt;- ggplotly(export_plot, tooltip = \"text\") %&gt;% layout(showlegend = TRUE)\n\n# Combine both charts in one figure with separate titles\ncombined_plotly &lt;- subplot(\n  export_plotly, \n  import_plotly, \n  nrows = 1,  \n  shareX = TRUE, \n  shareY = FALSE\n) %&gt;%\n  layout(\n    annotations = list(\n      list(\n        text = \"&lt;b&gt;Top 10 Countries by Total Trade&lt;/b&gt;\", \n        x = 0.50, y = 1.08,  # Center header at the top\n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 14, color = \"black\")\n      ),\n      list(\n        text = \"&lt;b&gt;Import Trend&lt;/b&gt;\", \n        x = 0.20, y = 1.04,  \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 13, color = \"black\")\n      ),\n      list(\n        text = \"&lt;b&gt;Export Trend&lt;/b&gt;\", \n        x = 0.80, y = 1.04,  \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 13, color = \"black\")\n      )\n    )\n  )\n\n# Display the fixed combined chart\ncombined_plotly\n\n\n\n\n\n\n\n\nKey Observation (Import): - China is one of the largest importer, however it is on a downward trend since 2022. - Taiwan is on an upward trend, being 4th place in 2015 and overtaking China to be the top importer in 2024. - Imports showed a decline in 2022 to 2023, which could be due to post-pandemic.\nKey Observation (Export): - China consistently maintains the highest export value. - United States and Vietnam have shown strong upwards trend, suggesting growth in export oriented industries. - Many countries dipped in 2020, likely due to COVID-19.\n\nTime-Series Analysis on Merchandise Category\nThis Time-series Chart shows the import and export trends for various product categories over the period 2015 to 2024. Each coloured line represents a different data series. User can opt to include or exclude a product category by selecting from the legend.\n\n\nClick here to show the R code\n# Function to clean and reshape monthly data\nclean_monthly_data &lt;- function(df, value_name) {\n  df_long &lt;- df %&gt;%\n    pivot_longer(cols = -`Data Series`, names_to = \"Month\", values_to = value_name) %&gt;%  # Fixed backticks\n    filter(str_detect(Month, \"^[0-9]{4} [A-Za-z]{3}$\")) %&gt;%  # Keep only YYYY MMM format\n    mutate(\n      Date = as.Date(parse_date_time(Month, \"Y b\")),  # Convert \"YYYY MMM\" to Date format\n      Year = year(Date),\n      Month = month(Date)\n    ) %&gt;%\n    select(`Data Series`, Date, !!value_name) %&gt;%\n    arrange(Date)\n  \n  return(df_long)\n}\n\n# Clean Import & Export Data\nimport_long &lt;- clean_monthly_data(import_data5, \"Import Value\")\nexport_long &lt;- clean_monthly_data(export_data5, \"Export Value\")\n\n# Merge Import and Export datasets\ntrade_data &lt;- left_join(import_long, export_long, by = c(\"Data Series\", \"Date\"))\n\n# Create an interactive line chart for Imports with better year readability\nimport_plot &lt;- ggplot(import_long, aes(x = Date, y = `Import Value`, color = `Data Series`)) +\n  geom_line(size = 0.7) +  \n  geom_point(size = 0.3) +   \n  scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\") +  # Adjust spacing to every 2 years\n  labs(x = \"Year\", y = \"Import Value\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n\nimport_plotly &lt;- ggplotly(import_plot) %&gt;% layout(showlegend = TRUE)\n\n# Create an interactive line chart for Export with better year readability\nexport_plot &lt;- ggplot(export_long, aes(x = Date, y = `Export Value`, color = `Data Series`)) +\n  geom_line(size = 0.7) +  \n  geom_point(size = 0.3) +   \n  scale_x_date(date_labels = \"%Y\", date_breaks = \"2 years\") +  # Adjust spacing to every 2 years\n  labs(x = \"Year\", y = \"Export Value\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels\n\nexport_plotly &lt;- ggplotly(export_plot) %&gt;% layout(showlegend = TRUE)\n\n# Adjust header position for proper alignment\ncombined_plotly &lt;- subplot(\n  export_plotly, \n  import_plotly, \n  nrows = 1,  \n  shareX = TRUE, \n  shareY = FALSE\n) %&gt;%\n  layout(\n    annotations = list(\n      list(\n        text = \"&lt;b&gt;Export Trend&lt;/b&gt;\", \n        x = 0.20, y = 1.04,  \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 14, color = \"black\")\n      ),\n      list(\n        text = \"&lt;b&gt;Import Trend&lt;/b&gt;\", \n        x = 0.80, y = 1.04,  \n        xref = \"paper\", yref = \"paper\",\n        showarrow = FALSE, font = list(size = 14, color = \"black\")\n      )\n    )\n  )\n\n# Display the final interactive plot\ncombined_plotly\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\nKey observations (Import): - Machinery & Transport Equipment shows a spike from 2021 to 2025. - This suggest higher domestic demand for machinery, possibly for industrial expansion or infrastructure projects.\nKey observations (Export): - Machinery & Transport Equipment is significantly higher than all other categories. - Exports in this category shows a steady growth. - Miscellaneous Manufactured Articles shows a steady growth. - Chemicals and Chemical Products is showing a declining trend since 2023.\n\n\nSTL Decomposition for Machinery and Transport Equipment\nMachinery & Transport Equipment is the top commodity for import and export, therefore a deeper analysis was done to uncover the trends.\n\n\nClick here to show the R code\n# Reshape Data to Long Format\nexport_long &lt;- export_data5 %&gt;%\n  pivot_longer(cols = matches(\"^[0-9]{4} [A-Za-z]{3}$\"), names_to = \"Month_Year\", values_to = \"Export Value\") %&gt;%\n  filter(`Data Series` == \"Machinery & Transport Equipment\") %&gt;%\n  separate(Month_Year, into = c(\"Year\", \"Month\"), sep = \" \") %&gt;%  # Split into Year and Month\n  mutate(\n    Year = as.integer(Year),  \n    Month = match(Month, month.abb),  # Convert \"Jan\" -&gt; 1, \"Feb\" -&gt; 2, etc.\n    Date = yearmonth(paste0(Year, \"-\", Month))  # Convert to yearmonth format\n  ) %&gt;%\n  select(Date, `Export Value`) %&gt;%\n  as_tsibble(index = Date)\n\n# Apply STL Decomposition\nexport_long %&gt;%\n  model(STL_Export = STL(`Export Value` ~ trend(window = 13) + season(window = \"periodic\"))) %&gt;%\n  components() %&gt;%\n  autoplot() +\n  scale_x_yearmonth(date_breaks = \"1 year\", date_labels = \"%Y\") +  # Show yearly labels\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability\n\n\n\n\n\n\n\n\n\n\n\nThe STL decomposition (Seasonal-Trend-Loess decomposition) splits the Machinery & Transport Equipment export data into 3 key components:\n\nTop Panel: Export Value - This is the actual observed data over time. - The overall trend appears upwards from 2015 to Dec 2024, showing that exports have increased over the period.\nSecond Panel: Trend\n\n\nThe trend shows a smooth, long-term increase.\n2019 to 2021 there is slight dip, likely due to COVID-19 and global trade disruptions.\nPost-2021, exports recover and continued growing, suggesting an increased global demand and economic stability.\n\n\nThird Panel: Season_Year\n\n\nThis captures repeating annual patterns.\nThe peaks and troughs indicate certain months consistently have higher/lower export activity.\nThis suggest a predictable export cycle, which could be influenced by manufacturing schedules or trade policies.\n\n\nBottom Panel: Reminder\n\n\nThis represents unexplained variations that are not captured by trend or seasonality.\nLarge spikes suggest external shocks like Economic downturns, trade restrictions etc."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ShinyDratini\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\nYOUNG: age group 0 to 4 until age groyup 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_borders()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nThis message is displayed once every 8 hours.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"jenks\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n' to 'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n' to 'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\n\n\n\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00) Now, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks' to fill.scale = tm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\nWarning: Values have found that are higher than the highest break. They are\nassigned to the highest interval\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nMultiple palettes called \"greens\" found: \"brewer.greens\", \"matplotlib.greens\". The first one, \"brewer.greens\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Greens\" is named\n\"greens\" (in long format \"brewer.greens\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"jenks\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'legend.is.portrait' (rename to 'orientation') to\n'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: use `fill.chart = tm_chart_histogram()` instead of\n`legend.hist = TRUE`.\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nstyle set to \"classic\"\n\nother available styles are: \"white\" (tmap default), \"gray\", \"natural\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"watercolor\"\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\nMultiple palettes called \"greens\" found: \"brewer.greens\", \"matplotlib.greens\". The first one, \"brewer.greens\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Greens\" is named\n\"greens\" (in long format \"brewer.greens\")\n\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nstyle set to \"white\" (tmap default)\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_polygons()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\nFor small multiples, specify a 'tm_scale_' for each multiple, and put them in a\nlist: 'fill'.scale = list(&lt;scale1&gt;, &lt;scale2&gt;, ...)'\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_polygons()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'legend.is.portrait' (rename to 'orientation') to\n'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nhe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n\n\n\n\nhe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n\n\n\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nknitr::include_graphics(\"image2.jpg\")\n\n\n\n\n\n\n\n\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\n\n\n\nTo create an interactive proportional symbol map in R, the view mode of tmap will be used.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nℹ tmap mode set to \"view\".\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\n\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\n    col = \"wp_functional\",\n    fill.scale = tm_scale_intervals(style = \"equal\", n = 10, values = \"brewer.blues\"),\n    colorNA = \"white\"\n  ) +\n  tm_borders(lwd = 0.1, fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\") +\n  tm_layout(legend.outside = FALSE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_polygons()`: migrate the argument(s) related to the scale of\nthe visual variable `fill` namely 'colorNA' (rename to 'value.na') to\nfill.scale = tm_scale(&lt;HERE&gt;).\nℹ For small multiples, specify a 'tm_scale_' for each multiple, and put them in\n  a list: 'fill.scale = list(&lt;scale1&gt;, &lt;scale2&gt;, ...)'\n\n\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\n    col = \"total_wp\",\n    fill.scale = tm_scale_intervals(style = \"equal\", n = 10, values = \"brewer.blues\"),\n    colorNA = \"white\"\n  ) +\n  tm_borders(lwd = 0.1, fill_alpha = 1) +\n  tm_title(\"Distribution of total water point by LGAs\") +\n  tm_layout(legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\n\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks', 'palette' (rename to 'values'),\n'labels' to fill.scale = tm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(title = )`\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks', 'palette' (rename to 'values'),\n'labels' to fill.scale = tm_scale(&lt;HERE&gt;).[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(title = )`[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"Multiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-with-r",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#choropleth-mapping-with-r",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\ShinyDratini\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex08\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\nYOUNG: age group 0 to 4 until age groyup 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group\n\n\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\n\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThing to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_borders()`: use 'fill' for the fill color of polygons/symbols\n(instead of 'col'), and 'col' for the outlines (instead of 'border.col').\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nThis message is displayed once every 8 hours.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"jenks\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n' to 'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n' to 'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\n\n\n\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00) Now, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks' to fill.scale = tm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n\n\nWarning: Values have found that are higher than the highest break. They are\nassigned to the highest interval\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nMultiple palettes called \"greens\" found: \"brewer.greens\", \"matplotlib.greens\". The first one, \"brewer.greens\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Greens\" is named\n\"greens\" (in long format \"brewer.greens\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"jenks\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'legend.is.portrait' (rename to 'orientation') to\n'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: use `fill.chart = tm_chart_histogram()` instead of\n`legend.hist = TRUE`.\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nstyle set to \"classic\"\n\nother available styles are: \"white\" (tmap default), \"gray\", \"natural\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"watercolor\"\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\nMultiple palettes called \"greens\" found: \"brewer.greens\", \"matplotlib.greens\". The first one, \"brewer.greens\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"-Greens\" is named\n\"greens\" (in long format \"brewer.greens\")\n\n\n\n\n\n\n\n\n\n\n\n\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(fill = \"DEPENDENCY\", \n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n\n\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\nstyle set to \"white\" (tmap default)\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\"\n\ntmap v3 styles: \"v3\" (tmap v3 default), \"gray_v3\", \"natural_v3\", \"cobalt_v3\", \"albatross_v3\", \"beaver_v3\", \"bw_v3\", \"classic_v3\", \"watercolor_v3\"\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_polygons()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\nFor small multiples, specify a 'tm_scale_' for each multiple, and put them in a\nlist: 'fill'.scale = list(&lt;scale1&gt;, &lt;scale2&gt;, ...)'\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_polygons()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"quantile\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'legend.is.portrait' (rename to 'orientation') to\n'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-geospatial-point-data",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#visualising-geospatial-point-data",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\n\n\nhe data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nFigure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System.\n\n\n\n\nhe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n\n\n\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nknitr::include_graphics(\"image2.jpg\")\n\n\n\n\n\n\n\n\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\n\n\n\nTo create an interactive proportional symbol map in R, the view mode of tmap will be used.\nThe code churn below will turn on the interactive mode of tmap.\n\ntmap_mode(\"view\")\n\nℹ tmap mode set to \"view\".\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\"."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#analytical-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex08/Hands-on_Ex08.html#analytical-mapping",
    "title": "Hands-on Exercise 8",
    "section": "",
    "text": "pacman::p_load(tmap, tidyverse, sf)\n\n\n\n\n\n\nNGA_wp &lt;- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\n\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\n    col = \"wp_functional\",\n    fill.scale = tm_scale_intervals(style = \"equal\", n = 10, values = \"brewer.blues\"),\n    colorNA = \"white\"\n  ) +\n  tm_borders(lwd = 0.1, fill_alpha = 1) +\n  tm_title(\"Distribution of functional water point by LGAs\") +\n  tm_layout(legend.outside = FALSE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_polygons()`: migrate the argument(s) related to the scale of\nthe visual variable `fill` namely 'colorNA' (rename to 'value.na') to\nfill.scale = tm_scale(&lt;HERE&gt;).\nℹ For small multiples, specify a 'tm_scale_' for each multiple, and put them in\n  a list: 'fill.scale = list(&lt;scale1&gt;, &lt;scale2&gt;, ...)'\n\n\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\n    col = \"total_wp\",\n    fill.scale = tm_scale_intervals(style = \"equal\", n = 10, values = \"brewer.blues\"),\n    colorNA = \"white\"\n  ) +\n  tm_borders(lwd = 0.1, fill_alpha = 1) +\n  tm_title(\"Distribution of total water point by LGAs\") +\n  tm_layout(legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)\n\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n[plot mode] fit legend/component: Some legend items or map compoments do not\nfit well, and are therefore rescaled.\nℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\n\n\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_fill()`: instead of `style = \"equal\"`, use fill.scale =\n`tm_scale_intervals()`.\nℹ Migrate the argument(s) 'style', 'n', 'palette' (rename to 'values') to\n  'tm_scale_intervals(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_borders()`: use `fill_alpha` instead of `alpha`.\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 1: Exclude records with NA by using the code chunk below.\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nStep 2: Creating customised classification and extracting values\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n\n\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks', 'palette' (rename to 'values'),\n'labels' to fill.scale = tm_scale(&lt;HERE&gt;).\n[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(title = )`\n[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`\n[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"\nMultiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\nThe code chunk below is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\nThe code chunk below is an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\n\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\n\nℹ tmap mode set to \"plot\".\n\nboxmap(\"wp_nonfunctional\", NGA_wp)\n\n\n── tmap v3 code detected ───────────────────────────────────────────────────────\n[v3-&gt;v4] `tm_tm_fill()`: migrate the argument(s) related to the scale of the\nvisual variable `fill` namely 'breaks', 'palette' (rename to 'values'),\n'labels' to fill.scale = tm_scale(&lt;HERE&gt;).[v3-&gt;v4] `tm_fill()`: migrate the argument(s) related to the legend of the\nvisual variable `fill` namely 'title' to 'fill.legend = tm_legend(&lt;HERE&gt;)'[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(title = )`[v3-&gt;v4] `tm_layout()`: use `tm_title()` instead of `tm_layout(main.title = )`[cols4all] color palettes: use palettes from the R package cols4all. Run\n`cols4all::c4a_gui()` to explore them. The old palette name \"Blues\" is named\n\"brewer.blues\"Multiple palettes called \"blues\" found: \"brewer.blues\", \"matplotlib.blues\". The first one, \"brewer.blues\", is returned."
  }
]